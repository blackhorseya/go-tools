// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	ctx "github.com/hsuanshao/go-tools/ctx"

	ianam "github.com/hsuanshao/go-tools/iana/entity/models"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetTimezoneList provides a mock function with given fields: _a0
func (_m *Repository) GetTimezoneList(_a0 ctx.CTX) []ianam.IANATimezone {
	ret := _m.Called(_a0)

	var r0 []ianam.IANATimezone
	if rf, ok := ret.Get(0).(func(ctx.CTX) []ianam.IANATimezone); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ianam.IANATimezone)
		}
	}

	return r0
}

// QueryLocation provides a mock function with given fields: _a0, name
func (_m *Repository) QueryLocation(_a0 ctx.CTX, name string) ([]*ianam.ZoneInfo, error) {
	ret := _m.Called(_a0, name)

	var r0 []*ianam.ZoneInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(ctx.CTX, string) ([]*ianam.ZoneInfo, error)); ok {
		return rf(_a0, name)
	}
	if rf, ok := ret.Get(0).(func(ctx.CTX, string) []*ianam.ZoneInfo); ok {
		r0 = rf(_a0, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ianam.ZoneInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(ctx.CTX, string) error); ok {
		r1 = rf(_a0, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
