// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	ctx "github.com/hsuanshao/go-tools/ctx"

	mock "github.com/stretchr/testify/mock"

	qpdf "github.com/hsuanshao/go-tools/qpdf"
)

// PDF is an autogenerated mock type for the PDF type
type PDF struct {
	mock.Mock
}

// AddPage provides a mock function with given fields: _a0
func (_m *PDF) AddPage(_a0 ctx.CTX) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(ctx.CTX) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AppendAbstractTable provides a mock function with given fields: _a0, table
func (_m *PDF) AppendAbstractTable(_a0 ctx.CTX, table *qpdf.AbstractTable) error {
	ret := _m.Called(_a0, table)

	var r0 error
	if rf, ok := ret.Get(0).(func(ctx.CTX, *qpdf.AbstractTable) error); ok {
		r0 = rf(_a0, table)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AppendTable provides a mock function with given fields: _a0, table
func (_m *PDF) AppendTable(_a0 ctx.CTX, table *qpdf.TableForm) error {
	ret := _m.Called(_a0, table)

	var r0 error
	if rf, ok := ret.Get(0).(func(ctx.CTX, *qpdf.TableForm) error); ok {
		r0 = rf(_a0, table)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initial provides a mock function with given fields: _a0, orientation, pageSize
func (_m *PDF) Initial(_a0 ctx.CTX, orientation qpdf.Orientation, pageSize qpdf.PageSize) error {
	ret := _m.Called(_a0, orientation, pageSize)

	var r0 error
	if rf, ok := ret.Get(0).(func(ctx.CTX, qpdf.Orientation, qpdf.PageSize) error); ok {
		r0 = rf(_a0, orientation, pageSize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: _a0, filename
func (_m *PDF) Save(_a0 ctx.CTX, filename string) (string, error) {
	ret := _m.Called(_a0, filename)

	var r0 string
	if rf, ok := ret.Get(0).(func(ctx.CTX, string) string); ok {
		r0 = rf(_a0, filename)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ctx.CTX, string) error); ok {
		r1 = rf(_a0, filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetFooter provides a mock function with given fields: _a0, footer
func (_m *PDF) SetFooter(_a0 ctx.CTX, footer *qpdf.FooterTable) error {
	ret := _m.Called(_a0, footer)

	var r0 error
	if rf, ok := ret.Get(0).(func(ctx.CTX, *qpdf.FooterTable) error); ok {
		r0 = rf(_a0, footer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetHeader provides a mock function with given fields: _a0, header
func (_m *PDF) SetHeader(_a0 ctx.CTX, header *qpdf.HeaderTable) error {
	ret := _m.Called(_a0, header)

	var r0 error
	if rf, ok := ret.Get(0).(func(ctx.CTX, *qpdf.HeaderTable) error); ok {
		r0 = rf(_a0, header)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
