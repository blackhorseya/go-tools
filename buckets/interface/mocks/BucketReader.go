// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	ctx "github.com/hsuanshao/go-tools/ctx"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// BucketReader is an autogenerated mock type for the BucketReader type
type BucketReader struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *BucketReader) Close() {
	_m.Called()
}

// GenerateReadPresignedURL provides a mock function with given fields: _a0, duration, objURL
func (_m *BucketReader) GenerateReadPresignedURL(_a0 ctx.CTX, duration time.Duration, objURL string) (string, error) {
	ret := _m.Called(_a0, duration, objURL)

	var r0 string
	if rf, ok := ret.Get(0).(func(ctx.CTX, time.Duration, string) string); ok {
		r0 = rf(_a0, duration, objURL)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ctx.CTX, time.Duration, string) error); ok {
		r1 = rf(_a0, duration, objURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListObjURLs provides a mock function with given fields: _a0, prefix, delim
func (_m *BucketReader) ListObjURLs(_a0 ctx.CTX, prefix string, delim string) ([]string, error) {
	ret := _m.Called(_a0, prefix, delim)

	var r0 []string
	if rf, ok := ret.Get(0).(func(ctx.CTX, string, string) []string); ok {
		r0 = rf(_a0, prefix, delim)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ctx.CTX, string, string) error); ok {
		r1 = rf(_a0, prefix, delim)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadObjectContent provides a mock function with given fields: _a0, objURL
func (_m *BucketReader) ReadObjectContent(_a0 ctx.CTX, objURL string) ([]byte, map[string]string, error) {
	ret := _m.Called(_a0, objURL)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(ctx.CTX, string) []byte); ok {
		r0 = rf(_a0, objURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(ctx.CTX, string) map[string]string); ok {
		r1 = rf(_a0, objURL)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(ctx.CTX, string) error); ok {
		r2 = rf(_a0, objURL)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewBucketReader interface {
	mock.TestingT
	Cleanup(func())
}

// NewBucketReader creates a new instance of BucketReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBucketReader(t mockConstructorTestingTNewBucketReader) *BucketReader {
	mock := &BucketReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
