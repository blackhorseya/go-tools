// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	ifc "github.com/hsuanshao/go-tools/buckets/interface"
	ctx "github.com/hsuanshao/go-tools/ctx"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetBucketReader provides a mock function with given fields: _a0
func (_m *Service) GetBucketReader(_a0 ctx.CTX) (ifc.BucketReader, error) {
	ret := _m.Called(_a0)

	var r0 ifc.BucketReader
	if rf, ok := ret.Get(0).(func(ctx.CTX) ifc.BucketReader); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ifc.BucketReader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ctx.CTX) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBucketWriter provides a mock function with given fields: _a0
func (_m *Service) GetBucketWriter(_a0 ctx.CTX) (ifc.BucketWriter, error) {
	ret := _m.Called(_a0)

	var r0 ifc.BucketWriter
	if rf, ok := ret.Get(0).(func(ctx.CTX) ifc.BucketWriter); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ifc.BucketWriter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ctx.CTX) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
