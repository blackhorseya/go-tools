// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/hsuanshao/go-tools/buckets/entity"
	ctx "github.com/hsuanshao/go-tools/ctx"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// BucketWriter is an autogenerated mock type for the BucketWriter type
type BucketWriter struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *BucketWriter) Close() {
	_m.Called()
}

// DeleteObjects provides a mock function with given fields: _a0, mime, objPathes
func (_m *BucketWriter) DeleteObjects(_a0 ctx.CTX, mime entity.ContentType, objPathes []string) (bool, error) {
	ret := _m.Called(_a0, mime, objPathes)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(ctx.CTX, entity.ContentType, []string) (bool, error)); ok {
		return rf(_a0, mime, objPathes)
	}
	if rf, ok := ret.Get(0).(func(ctx.CTX, entity.ContentType, []string) bool); ok {
		r0 = rf(_a0, mime, objPathes)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(ctx.CTX, entity.ContentType, []string) error); ok {
		r1 = rf(_a0, mime, objPathes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GeneratePutPresignedURL provides a mock function with given fields: _a0, uploadLimitDuration, mime, newObjSavePath, objectMetadata
func (_m *BucketWriter) GeneratePutPresignedURL(_a0 ctx.CTX, uploadLimitDuration time.Duration, mime entity.ContentType, newObjSavePath string, objectMetadata map[string]string) (string, error) {
	ret := _m.Called(_a0, uploadLimitDuration, mime, newObjSavePath, objectMetadata)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(ctx.CTX, time.Duration, entity.ContentType, string, map[string]string) (string, error)); ok {
		return rf(_a0, uploadLimitDuration, mime, newObjSavePath, objectMetadata)
	}
	if rf, ok := ret.Get(0).(func(ctx.CTX, time.Duration, entity.ContentType, string, map[string]string) string); ok {
		r0 = rf(_a0, uploadLimitDuration, mime, newObjSavePath, objectMetadata)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(ctx.CTX, time.Duration, entity.ContentType, string, map[string]string) error); ok {
		r1 = rf(_a0, uploadLimitDuration, mime, newObjSavePath, objectMetadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, mime, objPath, objByte, objmetadata
func (_m *BucketWriter) Update(_a0 ctx.CTX, mime entity.ContentType, objPath string, objByte []byte, objmetadata map[string]string) (string, error) {
	ret := _m.Called(_a0, mime, objPath, objByte, objmetadata)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(ctx.CTX, entity.ContentType, string, []byte, map[string]string) (string, error)); ok {
		return rf(_a0, mime, objPath, objByte, objmetadata)
	}
	if rf, ok := ret.Get(0).(func(ctx.CTX, entity.ContentType, string, []byte, map[string]string) string); ok {
		r0 = rf(_a0, mime, objPath, objByte, objmetadata)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(ctx.CTX, entity.ContentType, string, []byte, map[string]string) error); ok {
		r1 = rf(_a0, mime, objPath, objByte, objmetadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upload provides a mock function with given fields: _a0, mime, objSavePath, objByte, objmetadata
func (_m *BucketWriter) Upload(_a0 ctx.CTX, mime entity.ContentType, objSavePath string, objByte []byte, objmetadata map[string]string) (string, string, error) {
	ret := _m.Called(_a0, mime, objSavePath, objByte, objmetadata)

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(ctx.CTX, entity.ContentType, string, []byte, map[string]string) (string, string, error)); ok {
		return rf(_a0, mime, objSavePath, objByte, objmetadata)
	}
	if rf, ok := ret.Get(0).(func(ctx.CTX, entity.ContentType, string, []byte, map[string]string) string); ok {
		r0 = rf(_a0, mime, objSavePath, objByte, objmetadata)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(ctx.CTX, entity.ContentType, string, []byte, map[string]string) string); ok {
		r1 = rf(_a0, mime, objSavePath, objByte, objmetadata)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(ctx.CTX, entity.ContentType, string, []byte, map[string]string) error); ok {
		r2 = rf(_a0, mime, objSavePath, objByte, objmetadata)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewBucketWriter interface {
	mock.TestingT
	Cleanup(func())
}

// NewBucketWriter creates a new instance of BucketWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBucketWriter(t mockConstructorTestingTNewBucketWriter) *BucketWriter {
	mock := &BucketWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
