// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mq "github.com/aws/aws-sdk-go/service/mq"
	mock "github.com/stretchr/testify/mock"

	request "github.com/aws/aws-sdk-go/aws/request"
)

// API is an autogenerated mock type for the API type
type API struct {
	mock.Mock
}

// CreateBroker provides a mock function with given fields: _a0
func (_m *API) CreateBroker(_a0 *mq.CreateBrokerRequest) (*mq.CreateBrokerResponse, error) {
	ret := _m.Called(_a0)

	var r0 *mq.CreateBrokerResponse
	if rf, ok := ret.Get(0).(func(*mq.CreateBrokerRequest) *mq.CreateBrokerResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.CreateBrokerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*mq.CreateBrokerRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBrokerRequest provides a mock function with given fields: _a0
func (_m *API) CreateBrokerRequest(_a0 *mq.CreateBrokerRequest) (*request.Request, *mq.CreateBrokerResponse) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*mq.CreateBrokerRequest) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *mq.CreateBrokerResponse
	if rf, ok := ret.Get(1).(func(*mq.CreateBrokerRequest) *mq.CreateBrokerResponse); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*mq.CreateBrokerResponse)
		}
	}

	return r0, r1
}

// CreateBrokerWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) CreateBrokerWithContext(_a0 context.Context, _a1 *mq.CreateBrokerRequest, _a2 ...request.Option) (*mq.CreateBrokerResponse, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mq.CreateBrokerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *mq.CreateBrokerRequest, ...request.Option) *mq.CreateBrokerResponse); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.CreateBrokerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mq.CreateBrokerRequest, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConfiguration provides a mock function with given fields: _a0
func (_m *API) CreateConfiguration(_a0 *mq.CreateConfigurationRequest) (*mq.CreateConfigurationResponse, error) {
	ret := _m.Called(_a0)

	var r0 *mq.CreateConfigurationResponse
	if rf, ok := ret.Get(0).(func(*mq.CreateConfigurationRequest) *mq.CreateConfigurationResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.CreateConfigurationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*mq.CreateConfigurationRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConfigurationRequest provides a mock function with given fields: _a0
func (_m *API) CreateConfigurationRequest(_a0 *mq.CreateConfigurationRequest) (*request.Request, *mq.CreateConfigurationResponse) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*mq.CreateConfigurationRequest) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *mq.CreateConfigurationResponse
	if rf, ok := ret.Get(1).(func(*mq.CreateConfigurationRequest) *mq.CreateConfigurationResponse); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*mq.CreateConfigurationResponse)
		}
	}

	return r0, r1
}

// CreateConfigurationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) CreateConfigurationWithContext(_a0 context.Context, _a1 *mq.CreateConfigurationRequest, _a2 ...request.Option) (*mq.CreateConfigurationResponse, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mq.CreateConfigurationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *mq.CreateConfigurationRequest, ...request.Option) *mq.CreateConfigurationResponse); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.CreateConfigurationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mq.CreateConfigurationRequest, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTags provides a mock function with given fields: _a0
func (_m *API) CreateTags(_a0 *mq.CreateTagsInput) (*mq.CreateTagsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *mq.CreateTagsOutput
	if rf, ok := ret.Get(0).(func(*mq.CreateTagsInput) *mq.CreateTagsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.CreateTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*mq.CreateTagsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTagsRequest provides a mock function with given fields: _a0
func (_m *API) CreateTagsRequest(_a0 *mq.CreateTagsInput) (*request.Request, *mq.CreateTagsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*mq.CreateTagsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *mq.CreateTagsOutput
	if rf, ok := ret.Get(1).(func(*mq.CreateTagsInput) *mq.CreateTagsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*mq.CreateTagsOutput)
		}
	}

	return r0, r1
}

// CreateTagsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) CreateTagsWithContext(_a0 context.Context, _a1 *mq.CreateTagsInput, _a2 ...request.Option) (*mq.CreateTagsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mq.CreateTagsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *mq.CreateTagsInput, ...request.Option) *mq.CreateTagsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.CreateTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mq.CreateTagsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: _a0
func (_m *API) CreateUser(_a0 *mq.CreateUserRequest) (*mq.CreateUserOutput, error) {
	ret := _m.Called(_a0)

	var r0 *mq.CreateUserOutput
	if rf, ok := ret.Get(0).(func(*mq.CreateUserRequest) *mq.CreateUserOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.CreateUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*mq.CreateUserRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserRequest provides a mock function with given fields: _a0
func (_m *API) CreateUserRequest(_a0 *mq.CreateUserRequest) (*request.Request, *mq.CreateUserOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*mq.CreateUserRequest) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *mq.CreateUserOutput
	if rf, ok := ret.Get(1).(func(*mq.CreateUserRequest) *mq.CreateUserOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*mq.CreateUserOutput)
		}
	}

	return r0, r1
}

// CreateUserWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) CreateUserWithContext(_a0 context.Context, _a1 *mq.CreateUserRequest, _a2 ...request.Option) (*mq.CreateUserOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mq.CreateUserOutput
	if rf, ok := ret.Get(0).(func(context.Context, *mq.CreateUserRequest, ...request.Option) *mq.CreateUserOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.CreateUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mq.CreateUserRequest, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBroker provides a mock function with given fields: _a0
func (_m *API) DeleteBroker(_a0 *mq.DeleteBrokerInput) (*mq.DeleteBrokerResponse, error) {
	ret := _m.Called(_a0)

	var r0 *mq.DeleteBrokerResponse
	if rf, ok := ret.Get(0).(func(*mq.DeleteBrokerInput) *mq.DeleteBrokerResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.DeleteBrokerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*mq.DeleteBrokerInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBrokerRequest provides a mock function with given fields: _a0
func (_m *API) DeleteBrokerRequest(_a0 *mq.DeleteBrokerInput) (*request.Request, *mq.DeleteBrokerResponse) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*mq.DeleteBrokerInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *mq.DeleteBrokerResponse
	if rf, ok := ret.Get(1).(func(*mq.DeleteBrokerInput) *mq.DeleteBrokerResponse); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*mq.DeleteBrokerResponse)
		}
	}

	return r0, r1
}

// DeleteBrokerWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) DeleteBrokerWithContext(_a0 context.Context, _a1 *mq.DeleteBrokerInput, _a2 ...request.Option) (*mq.DeleteBrokerResponse, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mq.DeleteBrokerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *mq.DeleteBrokerInput, ...request.Option) *mq.DeleteBrokerResponse); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.DeleteBrokerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mq.DeleteBrokerInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTags provides a mock function with given fields: _a0
func (_m *API) DeleteTags(_a0 *mq.DeleteTagsInput) (*mq.DeleteTagsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *mq.DeleteTagsOutput
	if rf, ok := ret.Get(0).(func(*mq.DeleteTagsInput) *mq.DeleteTagsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.DeleteTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*mq.DeleteTagsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTagsRequest provides a mock function with given fields: _a0
func (_m *API) DeleteTagsRequest(_a0 *mq.DeleteTagsInput) (*request.Request, *mq.DeleteTagsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*mq.DeleteTagsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *mq.DeleteTagsOutput
	if rf, ok := ret.Get(1).(func(*mq.DeleteTagsInput) *mq.DeleteTagsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*mq.DeleteTagsOutput)
		}
	}

	return r0, r1
}

// DeleteTagsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) DeleteTagsWithContext(_a0 context.Context, _a1 *mq.DeleteTagsInput, _a2 ...request.Option) (*mq.DeleteTagsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mq.DeleteTagsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *mq.DeleteTagsInput, ...request.Option) *mq.DeleteTagsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.DeleteTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mq.DeleteTagsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: _a0
func (_m *API) DeleteUser(_a0 *mq.DeleteUserInput) (*mq.DeleteUserOutput, error) {
	ret := _m.Called(_a0)

	var r0 *mq.DeleteUserOutput
	if rf, ok := ret.Get(0).(func(*mq.DeleteUserInput) *mq.DeleteUserOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.DeleteUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*mq.DeleteUserInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserRequest provides a mock function with given fields: _a0
func (_m *API) DeleteUserRequest(_a0 *mq.DeleteUserInput) (*request.Request, *mq.DeleteUserOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*mq.DeleteUserInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *mq.DeleteUserOutput
	if rf, ok := ret.Get(1).(func(*mq.DeleteUserInput) *mq.DeleteUserOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*mq.DeleteUserOutput)
		}
	}

	return r0, r1
}

// DeleteUserWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) DeleteUserWithContext(_a0 context.Context, _a1 *mq.DeleteUserInput, _a2 ...request.Option) (*mq.DeleteUserOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mq.DeleteUserOutput
	if rf, ok := ret.Get(0).(func(context.Context, *mq.DeleteUserInput, ...request.Option) *mq.DeleteUserOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.DeleteUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mq.DeleteUserInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBroker provides a mock function with given fields: _a0
func (_m *API) DescribeBroker(_a0 *mq.DescribeBrokerInput) (*mq.DescribeBrokerResponse, error) {
	ret := _m.Called(_a0)

	var r0 *mq.DescribeBrokerResponse
	if rf, ok := ret.Get(0).(func(*mq.DescribeBrokerInput) *mq.DescribeBrokerResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.DescribeBrokerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*mq.DescribeBrokerInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBrokerEngineTypes provides a mock function with given fields: _a0
func (_m *API) DescribeBrokerEngineTypes(_a0 *mq.DescribeBrokerEngineTypesInput) (*mq.DescribeBrokerEngineTypesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *mq.DescribeBrokerEngineTypesOutput
	if rf, ok := ret.Get(0).(func(*mq.DescribeBrokerEngineTypesInput) *mq.DescribeBrokerEngineTypesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.DescribeBrokerEngineTypesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*mq.DescribeBrokerEngineTypesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBrokerEngineTypesRequest provides a mock function with given fields: _a0
func (_m *API) DescribeBrokerEngineTypesRequest(_a0 *mq.DescribeBrokerEngineTypesInput) (*request.Request, *mq.DescribeBrokerEngineTypesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*mq.DescribeBrokerEngineTypesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *mq.DescribeBrokerEngineTypesOutput
	if rf, ok := ret.Get(1).(func(*mq.DescribeBrokerEngineTypesInput) *mq.DescribeBrokerEngineTypesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*mq.DescribeBrokerEngineTypesOutput)
		}
	}

	return r0, r1
}

// DescribeBrokerEngineTypesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) DescribeBrokerEngineTypesWithContext(_a0 context.Context, _a1 *mq.DescribeBrokerEngineTypesInput, _a2 ...request.Option) (*mq.DescribeBrokerEngineTypesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mq.DescribeBrokerEngineTypesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *mq.DescribeBrokerEngineTypesInput, ...request.Option) *mq.DescribeBrokerEngineTypesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.DescribeBrokerEngineTypesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mq.DescribeBrokerEngineTypesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBrokerInstanceOptions provides a mock function with given fields: _a0
func (_m *API) DescribeBrokerInstanceOptions(_a0 *mq.DescribeBrokerInstanceOptionsInput) (*mq.DescribeBrokerInstanceOptionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *mq.DescribeBrokerInstanceOptionsOutput
	if rf, ok := ret.Get(0).(func(*mq.DescribeBrokerInstanceOptionsInput) *mq.DescribeBrokerInstanceOptionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.DescribeBrokerInstanceOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*mq.DescribeBrokerInstanceOptionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBrokerInstanceOptionsRequest provides a mock function with given fields: _a0
func (_m *API) DescribeBrokerInstanceOptionsRequest(_a0 *mq.DescribeBrokerInstanceOptionsInput) (*request.Request, *mq.DescribeBrokerInstanceOptionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*mq.DescribeBrokerInstanceOptionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *mq.DescribeBrokerInstanceOptionsOutput
	if rf, ok := ret.Get(1).(func(*mq.DescribeBrokerInstanceOptionsInput) *mq.DescribeBrokerInstanceOptionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*mq.DescribeBrokerInstanceOptionsOutput)
		}
	}

	return r0, r1
}

// DescribeBrokerInstanceOptionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) DescribeBrokerInstanceOptionsWithContext(_a0 context.Context, _a1 *mq.DescribeBrokerInstanceOptionsInput, _a2 ...request.Option) (*mq.DescribeBrokerInstanceOptionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mq.DescribeBrokerInstanceOptionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *mq.DescribeBrokerInstanceOptionsInput, ...request.Option) *mq.DescribeBrokerInstanceOptionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.DescribeBrokerInstanceOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mq.DescribeBrokerInstanceOptionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBrokerRequest provides a mock function with given fields: _a0
func (_m *API) DescribeBrokerRequest(_a0 *mq.DescribeBrokerInput) (*request.Request, *mq.DescribeBrokerResponse) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*mq.DescribeBrokerInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *mq.DescribeBrokerResponse
	if rf, ok := ret.Get(1).(func(*mq.DescribeBrokerInput) *mq.DescribeBrokerResponse); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*mq.DescribeBrokerResponse)
		}
	}

	return r0, r1
}

// DescribeBrokerWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) DescribeBrokerWithContext(_a0 context.Context, _a1 *mq.DescribeBrokerInput, _a2 ...request.Option) (*mq.DescribeBrokerResponse, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mq.DescribeBrokerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *mq.DescribeBrokerInput, ...request.Option) *mq.DescribeBrokerResponse); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.DescribeBrokerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mq.DescribeBrokerInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConfiguration provides a mock function with given fields: _a0
func (_m *API) DescribeConfiguration(_a0 *mq.DescribeConfigurationInput) (*mq.DescribeConfigurationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *mq.DescribeConfigurationOutput
	if rf, ok := ret.Get(0).(func(*mq.DescribeConfigurationInput) *mq.DescribeConfigurationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.DescribeConfigurationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*mq.DescribeConfigurationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConfigurationRequest provides a mock function with given fields: _a0
func (_m *API) DescribeConfigurationRequest(_a0 *mq.DescribeConfigurationInput) (*request.Request, *mq.DescribeConfigurationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*mq.DescribeConfigurationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *mq.DescribeConfigurationOutput
	if rf, ok := ret.Get(1).(func(*mq.DescribeConfigurationInput) *mq.DescribeConfigurationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*mq.DescribeConfigurationOutput)
		}
	}

	return r0, r1
}

// DescribeConfigurationRevision provides a mock function with given fields: _a0
func (_m *API) DescribeConfigurationRevision(_a0 *mq.DescribeConfigurationRevisionInput) (*mq.DescribeConfigurationRevisionResponse, error) {
	ret := _m.Called(_a0)

	var r0 *mq.DescribeConfigurationRevisionResponse
	if rf, ok := ret.Get(0).(func(*mq.DescribeConfigurationRevisionInput) *mq.DescribeConfigurationRevisionResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.DescribeConfigurationRevisionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*mq.DescribeConfigurationRevisionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConfigurationRevisionRequest provides a mock function with given fields: _a0
func (_m *API) DescribeConfigurationRevisionRequest(_a0 *mq.DescribeConfigurationRevisionInput) (*request.Request, *mq.DescribeConfigurationRevisionResponse) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*mq.DescribeConfigurationRevisionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *mq.DescribeConfigurationRevisionResponse
	if rf, ok := ret.Get(1).(func(*mq.DescribeConfigurationRevisionInput) *mq.DescribeConfigurationRevisionResponse); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*mq.DescribeConfigurationRevisionResponse)
		}
	}

	return r0, r1
}

// DescribeConfigurationRevisionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) DescribeConfigurationRevisionWithContext(_a0 context.Context, _a1 *mq.DescribeConfigurationRevisionInput, _a2 ...request.Option) (*mq.DescribeConfigurationRevisionResponse, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mq.DescribeConfigurationRevisionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *mq.DescribeConfigurationRevisionInput, ...request.Option) *mq.DescribeConfigurationRevisionResponse); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.DescribeConfigurationRevisionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mq.DescribeConfigurationRevisionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConfigurationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) DescribeConfigurationWithContext(_a0 context.Context, _a1 *mq.DescribeConfigurationInput, _a2 ...request.Option) (*mq.DescribeConfigurationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mq.DescribeConfigurationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *mq.DescribeConfigurationInput, ...request.Option) *mq.DescribeConfigurationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.DescribeConfigurationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mq.DescribeConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUser provides a mock function with given fields: _a0
func (_m *API) DescribeUser(_a0 *mq.DescribeUserInput) (*mq.DescribeUserResponse, error) {
	ret := _m.Called(_a0)

	var r0 *mq.DescribeUserResponse
	if rf, ok := ret.Get(0).(func(*mq.DescribeUserInput) *mq.DescribeUserResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.DescribeUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*mq.DescribeUserInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUserRequest provides a mock function with given fields: _a0
func (_m *API) DescribeUserRequest(_a0 *mq.DescribeUserInput) (*request.Request, *mq.DescribeUserResponse) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*mq.DescribeUserInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *mq.DescribeUserResponse
	if rf, ok := ret.Get(1).(func(*mq.DescribeUserInput) *mq.DescribeUserResponse); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*mq.DescribeUserResponse)
		}
	}

	return r0, r1
}

// DescribeUserWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) DescribeUserWithContext(_a0 context.Context, _a1 *mq.DescribeUserInput, _a2 ...request.Option) (*mq.DescribeUserResponse, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mq.DescribeUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *mq.DescribeUserInput, ...request.Option) *mq.DescribeUserResponse); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.DescribeUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mq.DescribeUserInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBrokers provides a mock function with given fields: _a0
func (_m *API) ListBrokers(_a0 *mq.ListBrokersInput) (*mq.ListBrokersResponse, error) {
	ret := _m.Called(_a0)

	var r0 *mq.ListBrokersResponse
	if rf, ok := ret.Get(0).(func(*mq.ListBrokersInput) *mq.ListBrokersResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.ListBrokersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*mq.ListBrokersInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBrokersPages provides a mock function with given fields: _a0, _a1
func (_m *API) ListBrokersPages(_a0 *mq.ListBrokersInput, _a1 func(*mq.ListBrokersResponse, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*mq.ListBrokersInput, func(*mq.ListBrokersResponse, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListBrokersPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *API) ListBrokersPagesWithContext(_a0 context.Context, _a1 *mq.ListBrokersInput, _a2 func(*mq.ListBrokersResponse, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *mq.ListBrokersInput, func(*mq.ListBrokersResponse, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListBrokersRequest provides a mock function with given fields: _a0
func (_m *API) ListBrokersRequest(_a0 *mq.ListBrokersInput) (*request.Request, *mq.ListBrokersResponse) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*mq.ListBrokersInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *mq.ListBrokersResponse
	if rf, ok := ret.Get(1).(func(*mq.ListBrokersInput) *mq.ListBrokersResponse); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*mq.ListBrokersResponse)
		}
	}

	return r0, r1
}

// ListBrokersWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) ListBrokersWithContext(_a0 context.Context, _a1 *mq.ListBrokersInput, _a2 ...request.Option) (*mq.ListBrokersResponse, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mq.ListBrokersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *mq.ListBrokersInput, ...request.Option) *mq.ListBrokersResponse); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.ListBrokersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mq.ListBrokersInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConfigurationRevisions provides a mock function with given fields: _a0
func (_m *API) ListConfigurationRevisions(_a0 *mq.ListConfigurationRevisionsInput) (*mq.ListConfigurationRevisionsResponse, error) {
	ret := _m.Called(_a0)

	var r0 *mq.ListConfigurationRevisionsResponse
	if rf, ok := ret.Get(0).(func(*mq.ListConfigurationRevisionsInput) *mq.ListConfigurationRevisionsResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.ListConfigurationRevisionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*mq.ListConfigurationRevisionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConfigurationRevisionsRequest provides a mock function with given fields: _a0
func (_m *API) ListConfigurationRevisionsRequest(_a0 *mq.ListConfigurationRevisionsInput) (*request.Request, *mq.ListConfigurationRevisionsResponse) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*mq.ListConfigurationRevisionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *mq.ListConfigurationRevisionsResponse
	if rf, ok := ret.Get(1).(func(*mq.ListConfigurationRevisionsInput) *mq.ListConfigurationRevisionsResponse); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*mq.ListConfigurationRevisionsResponse)
		}
	}

	return r0, r1
}

// ListConfigurationRevisionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) ListConfigurationRevisionsWithContext(_a0 context.Context, _a1 *mq.ListConfigurationRevisionsInput, _a2 ...request.Option) (*mq.ListConfigurationRevisionsResponse, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mq.ListConfigurationRevisionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *mq.ListConfigurationRevisionsInput, ...request.Option) *mq.ListConfigurationRevisionsResponse); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.ListConfigurationRevisionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mq.ListConfigurationRevisionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConfigurations provides a mock function with given fields: _a0
func (_m *API) ListConfigurations(_a0 *mq.ListConfigurationsInput) (*mq.ListConfigurationsResponse, error) {
	ret := _m.Called(_a0)

	var r0 *mq.ListConfigurationsResponse
	if rf, ok := ret.Get(0).(func(*mq.ListConfigurationsInput) *mq.ListConfigurationsResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.ListConfigurationsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*mq.ListConfigurationsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConfigurationsRequest provides a mock function with given fields: _a0
func (_m *API) ListConfigurationsRequest(_a0 *mq.ListConfigurationsInput) (*request.Request, *mq.ListConfigurationsResponse) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*mq.ListConfigurationsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *mq.ListConfigurationsResponse
	if rf, ok := ret.Get(1).(func(*mq.ListConfigurationsInput) *mq.ListConfigurationsResponse); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*mq.ListConfigurationsResponse)
		}
	}

	return r0, r1
}

// ListConfigurationsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) ListConfigurationsWithContext(_a0 context.Context, _a1 *mq.ListConfigurationsInput, _a2 ...request.Option) (*mq.ListConfigurationsResponse, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mq.ListConfigurationsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *mq.ListConfigurationsInput, ...request.Option) *mq.ListConfigurationsResponse); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.ListConfigurationsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mq.ListConfigurationsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTags provides a mock function with given fields: _a0
func (_m *API) ListTags(_a0 *mq.ListTagsInput) (*mq.ListTagsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *mq.ListTagsOutput
	if rf, ok := ret.Get(0).(func(*mq.ListTagsInput) *mq.ListTagsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.ListTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*mq.ListTagsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsRequest provides a mock function with given fields: _a0
func (_m *API) ListTagsRequest(_a0 *mq.ListTagsInput) (*request.Request, *mq.ListTagsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*mq.ListTagsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *mq.ListTagsOutput
	if rf, ok := ret.Get(1).(func(*mq.ListTagsInput) *mq.ListTagsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*mq.ListTagsOutput)
		}
	}

	return r0, r1
}

// ListTagsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) ListTagsWithContext(_a0 context.Context, _a1 *mq.ListTagsInput, _a2 ...request.Option) (*mq.ListTagsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mq.ListTagsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *mq.ListTagsInput, ...request.Option) *mq.ListTagsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.ListTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mq.ListTagsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields: _a0
func (_m *API) ListUsers(_a0 *mq.ListUsersInput) (*mq.ListUsersResponse, error) {
	ret := _m.Called(_a0)

	var r0 *mq.ListUsersResponse
	if rf, ok := ret.Get(0).(func(*mq.ListUsersInput) *mq.ListUsersResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.ListUsersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*mq.ListUsersInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsersRequest provides a mock function with given fields: _a0
func (_m *API) ListUsersRequest(_a0 *mq.ListUsersInput) (*request.Request, *mq.ListUsersResponse) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*mq.ListUsersInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *mq.ListUsersResponse
	if rf, ok := ret.Get(1).(func(*mq.ListUsersInput) *mq.ListUsersResponse); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*mq.ListUsersResponse)
		}
	}

	return r0, r1
}

// ListUsersWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) ListUsersWithContext(_a0 context.Context, _a1 *mq.ListUsersInput, _a2 ...request.Option) (*mq.ListUsersResponse, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mq.ListUsersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *mq.ListUsersInput, ...request.Option) *mq.ListUsersResponse); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.ListUsersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mq.ListUsersInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RebootBroker provides a mock function with given fields: _a0
func (_m *API) RebootBroker(_a0 *mq.RebootBrokerInput) (*mq.RebootBrokerOutput, error) {
	ret := _m.Called(_a0)

	var r0 *mq.RebootBrokerOutput
	if rf, ok := ret.Get(0).(func(*mq.RebootBrokerInput) *mq.RebootBrokerOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.RebootBrokerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*mq.RebootBrokerInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RebootBrokerRequest provides a mock function with given fields: _a0
func (_m *API) RebootBrokerRequest(_a0 *mq.RebootBrokerInput) (*request.Request, *mq.RebootBrokerOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*mq.RebootBrokerInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *mq.RebootBrokerOutput
	if rf, ok := ret.Get(1).(func(*mq.RebootBrokerInput) *mq.RebootBrokerOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*mq.RebootBrokerOutput)
		}
	}

	return r0, r1
}

// RebootBrokerWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) RebootBrokerWithContext(_a0 context.Context, _a1 *mq.RebootBrokerInput, _a2 ...request.Option) (*mq.RebootBrokerOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mq.RebootBrokerOutput
	if rf, ok := ret.Get(0).(func(context.Context, *mq.RebootBrokerInput, ...request.Option) *mq.RebootBrokerOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.RebootBrokerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mq.RebootBrokerInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBroker provides a mock function with given fields: _a0
func (_m *API) UpdateBroker(_a0 *mq.UpdateBrokerRequest) (*mq.UpdateBrokerResponse, error) {
	ret := _m.Called(_a0)

	var r0 *mq.UpdateBrokerResponse
	if rf, ok := ret.Get(0).(func(*mq.UpdateBrokerRequest) *mq.UpdateBrokerResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.UpdateBrokerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*mq.UpdateBrokerRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBrokerRequest provides a mock function with given fields: _a0
func (_m *API) UpdateBrokerRequest(_a0 *mq.UpdateBrokerRequest) (*request.Request, *mq.UpdateBrokerResponse) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*mq.UpdateBrokerRequest) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *mq.UpdateBrokerResponse
	if rf, ok := ret.Get(1).(func(*mq.UpdateBrokerRequest) *mq.UpdateBrokerResponse); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*mq.UpdateBrokerResponse)
		}
	}

	return r0, r1
}

// UpdateBrokerWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) UpdateBrokerWithContext(_a0 context.Context, _a1 *mq.UpdateBrokerRequest, _a2 ...request.Option) (*mq.UpdateBrokerResponse, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mq.UpdateBrokerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *mq.UpdateBrokerRequest, ...request.Option) *mq.UpdateBrokerResponse); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.UpdateBrokerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mq.UpdateBrokerRequest, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConfiguration provides a mock function with given fields: _a0
func (_m *API) UpdateConfiguration(_a0 *mq.UpdateConfigurationRequest) (*mq.UpdateConfigurationResponse, error) {
	ret := _m.Called(_a0)

	var r0 *mq.UpdateConfigurationResponse
	if rf, ok := ret.Get(0).(func(*mq.UpdateConfigurationRequest) *mq.UpdateConfigurationResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.UpdateConfigurationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*mq.UpdateConfigurationRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConfigurationRequest provides a mock function with given fields: _a0
func (_m *API) UpdateConfigurationRequest(_a0 *mq.UpdateConfigurationRequest) (*request.Request, *mq.UpdateConfigurationResponse) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*mq.UpdateConfigurationRequest) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *mq.UpdateConfigurationResponse
	if rf, ok := ret.Get(1).(func(*mq.UpdateConfigurationRequest) *mq.UpdateConfigurationResponse); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*mq.UpdateConfigurationResponse)
		}
	}

	return r0, r1
}

// UpdateConfigurationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) UpdateConfigurationWithContext(_a0 context.Context, _a1 *mq.UpdateConfigurationRequest, _a2 ...request.Option) (*mq.UpdateConfigurationResponse, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mq.UpdateConfigurationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *mq.UpdateConfigurationRequest, ...request.Option) *mq.UpdateConfigurationResponse); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.UpdateConfigurationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mq.UpdateConfigurationRequest, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: _a0
func (_m *API) UpdateUser(_a0 *mq.UpdateUserRequest) (*mq.UpdateUserOutput, error) {
	ret := _m.Called(_a0)

	var r0 *mq.UpdateUserOutput
	if rf, ok := ret.Get(0).(func(*mq.UpdateUserRequest) *mq.UpdateUserOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.UpdateUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*mq.UpdateUserRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserRequest provides a mock function with given fields: _a0
func (_m *API) UpdateUserRequest(_a0 *mq.UpdateUserRequest) (*request.Request, *mq.UpdateUserOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*mq.UpdateUserRequest) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *mq.UpdateUserOutput
	if rf, ok := ret.Get(1).(func(*mq.UpdateUserRequest) *mq.UpdateUserOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*mq.UpdateUserOutput)
		}
	}

	return r0, r1
}

// UpdateUserWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) UpdateUserWithContext(_a0 context.Context, _a1 *mq.UpdateUserRequest, _a2 ...request.Option) (*mq.UpdateUserOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mq.UpdateUserOutput
	if rf, ok := ret.Get(0).(func(context.Context, *mq.UpdateUserRequest, ...request.Option) *mq.UpdateUserOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mq.UpdateUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mq.UpdateUserRequest, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewAPI creates a new instance of API. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAPI(t mockConstructorTestingTNewAPI) *API {
	mock := &API{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
