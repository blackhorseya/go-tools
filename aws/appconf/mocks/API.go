// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	appconfig "github.com/aws/aws-sdk-go/service/appconfig"

	mock "github.com/stretchr/testify/mock"

	request "github.com/aws/aws-sdk-go/aws/request"
)

// API is an autogenerated mock type for the API type
type API struct {
	mock.Mock
}

// CreateApplication provides a mock function with given fields: _a0
func (_m *API) CreateApplication(_a0 *appconfig.CreateApplicationInput) (*appconfig.CreateApplicationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.CreateApplicationOutput
	if rf, ok := ret.Get(0).(func(*appconfig.CreateApplicationInput) *appconfig.CreateApplicationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.CreateApplicationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.CreateApplicationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApplicationRequest provides a mock function with given fields: _a0
func (_m *API) CreateApplicationRequest(_a0 *appconfig.CreateApplicationInput) (*request.Request, *appconfig.CreateApplicationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.CreateApplicationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.CreateApplicationOutput
	if rf, ok := ret.Get(1).(func(*appconfig.CreateApplicationInput) *appconfig.CreateApplicationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.CreateApplicationOutput)
		}
	}

	return r0, r1
}

// CreateApplicationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) CreateApplicationWithContext(_a0 context.Context, _a1 *appconfig.CreateApplicationInput, _a2 ...request.Option) (*appconfig.CreateApplicationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.CreateApplicationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.CreateApplicationInput, ...request.Option) *appconfig.CreateApplicationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.CreateApplicationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.CreateApplicationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConfigurationProfile provides a mock function with given fields: _a0
func (_m *API) CreateConfigurationProfile(_a0 *appconfig.CreateConfigurationProfileInput) (*appconfig.CreateConfigurationProfileOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.CreateConfigurationProfileOutput
	if rf, ok := ret.Get(0).(func(*appconfig.CreateConfigurationProfileInput) *appconfig.CreateConfigurationProfileOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.CreateConfigurationProfileOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.CreateConfigurationProfileInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConfigurationProfileRequest provides a mock function with given fields: _a0
func (_m *API) CreateConfigurationProfileRequest(_a0 *appconfig.CreateConfigurationProfileInput) (*request.Request, *appconfig.CreateConfigurationProfileOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.CreateConfigurationProfileInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.CreateConfigurationProfileOutput
	if rf, ok := ret.Get(1).(func(*appconfig.CreateConfigurationProfileInput) *appconfig.CreateConfigurationProfileOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.CreateConfigurationProfileOutput)
		}
	}

	return r0, r1
}

// CreateConfigurationProfileWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) CreateConfigurationProfileWithContext(_a0 context.Context, _a1 *appconfig.CreateConfigurationProfileInput, _a2 ...request.Option) (*appconfig.CreateConfigurationProfileOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.CreateConfigurationProfileOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.CreateConfigurationProfileInput, ...request.Option) *appconfig.CreateConfigurationProfileOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.CreateConfigurationProfileOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.CreateConfigurationProfileInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeploymentStrategy provides a mock function with given fields: _a0
func (_m *API) CreateDeploymentStrategy(_a0 *appconfig.CreateDeploymentStrategyInput) (*appconfig.CreateDeploymentStrategyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.CreateDeploymentStrategyOutput
	if rf, ok := ret.Get(0).(func(*appconfig.CreateDeploymentStrategyInput) *appconfig.CreateDeploymentStrategyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.CreateDeploymentStrategyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.CreateDeploymentStrategyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeploymentStrategyRequest provides a mock function with given fields: _a0
func (_m *API) CreateDeploymentStrategyRequest(_a0 *appconfig.CreateDeploymentStrategyInput) (*request.Request, *appconfig.CreateDeploymentStrategyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.CreateDeploymentStrategyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.CreateDeploymentStrategyOutput
	if rf, ok := ret.Get(1).(func(*appconfig.CreateDeploymentStrategyInput) *appconfig.CreateDeploymentStrategyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.CreateDeploymentStrategyOutput)
		}
	}

	return r0, r1
}

// CreateDeploymentStrategyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) CreateDeploymentStrategyWithContext(_a0 context.Context, _a1 *appconfig.CreateDeploymentStrategyInput, _a2 ...request.Option) (*appconfig.CreateDeploymentStrategyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.CreateDeploymentStrategyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.CreateDeploymentStrategyInput, ...request.Option) *appconfig.CreateDeploymentStrategyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.CreateDeploymentStrategyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.CreateDeploymentStrategyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEnvironment provides a mock function with given fields: _a0
func (_m *API) CreateEnvironment(_a0 *appconfig.CreateEnvironmentInput) (*appconfig.CreateEnvironmentOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.CreateEnvironmentOutput
	if rf, ok := ret.Get(0).(func(*appconfig.CreateEnvironmentInput) *appconfig.CreateEnvironmentOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.CreateEnvironmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.CreateEnvironmentInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEnvironmentRequest provides a mock function with given fields: _a0
func (_m *API) CreateEnvironmentRequest(_a0 *appconfig.CreateEnvironmentInput) (*request.Request, *appconfig.CreateEnvironmentOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.CreateEnvironmentInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.CreateEnvironmentOutput
	if rf, ok := ret.Get(1).(func(*appconfig.CreateEnvironmentInput) *appconfig.CreateEnvironmentOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.CreateEnvironmentOutput)
		}
	}

	return r0, r1
}

// CreateEnvironmentWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) CreateEnvironmentWithContext(_a0 context.Context, _a1 *appconfig.CreateEnvironmentInput, _a2 ...request.Option) (*appconfig.CreateEnvironmentOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.CreateEnvironmentOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.CreateEnvironmentInput, ...request.Option) *appconfig.CreateEnvironmentOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.CreateEnvironmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.CreateEnvironmentInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateExtension provides a mock function with given fields: _a0
func (_m *API) CreateExtension(_a0 *appconfig.CreateExtensionInput) (*appconfig.CreateExtensionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.CreateExtensionOutput
	if rf, ok := ret.Get(0).(func(*appconfig.CreateExtensionInput) *appconfig.CreateExtensionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.CreateExtensionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.CreateExtensionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateExtensionAssociation provides a mock function with given fields: _a0
func (_m *API) CreateExtensionAssociation(_a0 *appconfig.CreateExtensionAssociationInput) (*appconfig.CreateExtensionAssociationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.CreateExtensionAssociationOutput
	if rf, ok := ret.Get(0).(func(*appconfig.CreateExtensionAssociationInput) *appconfig.CreateExtensionAssociationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.CreateExtensionAssociationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.CreateExtensionAssociationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateExtensionAssociationRequest provides a mock function with given fields: _a0
func (_m *API) CreateExtensionAssociationRequest(_a0 *appconfig.CreateExtensionAssociationInput) (*request.Request, *appconfig.CreateExtensionAssociationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.CreateExtensionAssociationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.CreateExtensionAssociationOutput
	if rf, ok := ret.Get(1).(func(*appconfig.CreateExtensionAssociationInput) *appconfig.CreateExtensionAssociationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.CreateExtensionAssociationOutput)
		}
	}

	return r0, r1
}

// CreateExtensionAssociationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) CreateExtensionAssociationWithContext(_a0 context.Context, _a1 *appconfig.CreateExtensionAssociationInput, _a2 ...request.Option) (*appconfig.CreateExtensionAssociationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.CreateExtensionAssociationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.CreateExtensionAssociationInput, ...request.Option) *appconfig.CreateExtensionAssociationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.CreateExtensionAssociationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.CreateExtensionAssociationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateExtensionRequest provides a mock function with given fields: _a0
func (_m *API) CreateExtensionRequest(_a0 *appconfig.CreateExtensionInput) (*request.Request, *appconfig.CreateExtensionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.CreateExtensionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.CreateExtensionOutput
	if rf, ok := ret.Get(1).(func(*appconfig.CreateExtensionInput) *appconfig.CreateExtensionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.CreateExtensionOutput)
		}
	}

	return r0, r1
}

// CreateExtensionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) CreateExtensionWithContext(_a0 context.Context, _a1 *appconfig.CreateExtensionInput, _a2 ...request.Option) (*appconfig.CreateExtensionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.CreateExtensionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.CreateExtensionInput, ...request.Option) *appconfig.CreateExtensionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.CreateExtensionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.CreateExtensionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHostedConfigurationVersion provides a mock function with given fields: _a0
func (_m *API) CreateHostedConfigurationVersion(_a0 *appconfig.CreateHostedConfigurationVersionInput) (*appconfig.CreateHostedConfigurationVersionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.CreateHostedConfigurationVersionOutput
	if rf, ok := ret.Get(0).(func(*appconfig.CreateHostedConfigurationVersionInput) *appconfig.CreateHostedConfigurationVersionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.CreateHostedConfigurationVersionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.CreateHostedConfigurationVersionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHostedConfigurationVersionRequest provides a mock function with given fields: _a0
func (_m *API) CreateHostedConfigurationVersionRequest(_a0 *appconfig.CreateHostedConfigurationVersionInput) (*request.Request, *appconfig.CreateHostedConfigurationVersionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.CreateHostedConfigurationVersionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.CreateHostedConfigurationVersionOutput
	if rf, ok := ret.Get(1).(func(*appconfig.CreateHostedConfigurationVersionInput) *appconfig.CreateHostedConfigurationVersionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.CreateHostedConfigurationVersionOutput)
		}
	}

	return r0, r1
}

// CreateHostedConfigurationVersionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) CreateHostedConfigurationVersionWithContext(_a0 context.Context, _a1 *appconfig.CreateHostedConfigurationVersionInput, _a2 ...request.Option) (*appconfig.CreateHostedConfigurationVersionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.CreateHostedConfigurationVersionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.CreateHostedConfigurationVersionInput, ...request.Option) *appconfig.CreateHostedConfigurationVersionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.CreateHostedConfigurationVersionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.CreateHostedConfigurationVersionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplication provides a mock function with given fields: _a0
func (_m *API) DeleteApplication(_a0 *appconfig.DeleteApplicationInput) (*appconfig.DeleteApplicationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.DeleteApplicationOutput
	if rf, ok := ret.Get(0).(func(*appconfig.DeleteApplicationInput) *appconfig.DeleteApplicationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.DeleteApplicationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.DeleteApplicationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplicationRequest provides a mock function with given fields: _a0
func (_m *API) DeleteApplicationRequest(_a0 *appconfig.DeleteApplicationInput) (*request.Request, *appconfig.DeleteApplicationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.DeleteApplicationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.DeleteApplicationOutput
	if rf, ok := ret.Get(1).(func(*appconfig.DeleteApplicationInput) *appconfig.DeleteApplicationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.DeleteApplicationOutput)
		}
	}

	return r0, r1
}

// DeleteApplicationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) DeleteApplicationWithContext(_a0 context.Context, _a1 *appconfig.DeleteApplicationInput, _a2 ...request.Option) (*appconfig.DeleteApplicationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.DeleteApplicationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.DeleteApplicationInput, ...request.Option) *appconfig.DeleteApplicationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.DeleteApplicationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.DeleteApplicationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfigurationProfile provides a mock function with given fields: _a0
func (_m *API) DeleteConfigurationProfile(_a0 *appconfig.DeleteConfigurationProfileInput) (*appconfig.DeleteConfigurationProfileOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.DeleteConfigurationProfileOutput
	if rf, ok := ret.Get(0).(func(*appconfig.DeleteConfigurationProfileInput) *appconfig.DeleteConfigurationProfileOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.DeleteConfigurationProfileOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.DeleteConfigurationProfileInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfigurationProfileRequest provides a mock function with given fields: _a0
func (_m *API) DeleteConfigurationProfileRequest(_a0 *appconfig.DeleteConfigurationProfileInput) (*request.Request, *appconfig.DeleteConfigurationProfileOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.DeleteConfigurationProfileInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.DeleteConfigurationProfileOutput
	if rf, ok := ret.Get(1).(func(*appconfig.DeleteConfigurationProfileInput) *appconfig.DeleteConfigurationProfileOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.DeleteConfigurationProfileOutput)
		}
	}

	return r0, r1
}

// DeleteConfigurationProfileWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) DeleteConfigurationProfileWithContext(_a0 context.Context, _a1 *appconfig.DeleteConfigurationProfileInput, _a2 ...request.Option) (*appconfig.DeleteConfigurationProfileOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.DeleteConfigurationProfileOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.DeleteConfigurationProfileInput, ...request.Option) *appconfig.DeleteConfigurationProfileOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.DeleteConfigurationProfileOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.DeleteConfigurationProfileInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeploymentStrategy provides a mock function with given fields: _a0
func (_m *API) DeleteDeploymentStrategy(_a0 *appconfig.DeleteDeploymentStrategyInput) (*appconfig.DeleteDeploymentStrategyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.DeleteDeploymentStrategyOutput
	if rf, ok := ret.Get(0).(func(*appconfig.DeleteDeploymentStrategyInput) *appconfig.DeleteDeploymentStrategyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.DeleteDeploymentStrategyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.DeleteDeploymentStrategyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeploymentStrategyRequest provides a mock function with given fields: _a0
func (_m *API) DeleteDeploymentStrategyRequest(_a0 *appconfig.DeleteDeploymentStrategyInput) (*request.Request, *appconfig.DeleteDeploymentStrategyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.DeleteDeploymentStrategyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.DeleteDeploymentStrategyOutput
	if rf, ok := ret.Get(1).(func(*appconfig.DeleteDeploymentStrategyInput) *appconfig.DeleteDeploymentStrategyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.DeleteDeploymentStrategyOutput)
		}
	}

	return r0, r1
}

// DeleteDeploymentStrategyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) DeleteDeploymentStrategyWithContext(_a0 context.Context, _a1 *appconfig.DeleteDeploymentStrategyInput, _a2 ...request.Option) (*appconfig.DeleteDeploymentStrategyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.DeleteDeploymentStrategyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.DeleteDeploymentStrategyInput, ...request.Option) *appconfig.DeleteDeploymentStrategyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.DeleteDeploymentStrategyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.DeleteDeploymentStrategyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEnvironment provides a mock function with given fields: _a0
func (_m *API) DeleteEnvironment(_a0 *appconfig.DeleteEnvironmentInput) (*appconfig.DeleteEnvironmentOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.DeleteEnvironmentOutput
	if rf, ok := ret.Get(0).(func(*appconfig.DeleteEnvironmentInput) *appconfig.DeleteEnvironmentOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.DeleteEnvironmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.DeleteEnvironmentInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEnvironmentRequest provides a mock function with given fields: _a0
func (_m *API) DeleteEnvironmentRequest(_a0 *appconfig.DeleteEnvironmentInput) (*request.Request, *appconfig.DeleteEnvironmentOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.DeleteEnvironmentInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.DeleteEnvironmentOutput
	if rf, ok := ret.Get(1).(func(*appconfig.DeleteEnvironmentInput) *appconfig.DeleteEnvironmentOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.DeleteEnvironmentOutput)
		}
	}

	return r0, r1
}

// DeleteEnvironmentWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) DeleteEnvironmentWithContext(_a0 context.Context, _a1 *appconfig.DeleteEnvironmentInput, _a2 ...request.Option) (*appconfig.DeleteEnvironmentOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.DeleteEnvironmentOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.DeleteEnvironmentInput, ...request.Option) *appconfig.DeleteEnvironmentOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.DeleteEnvironmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.DeleteEnvironmentInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteExtension provides a mock function with given fields: _a0
func (_m *API) DeleteExtension(_a0 *appconfig.DeleteExtensionInput) (*appconfig.DeleteExtensionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.DeleteExtensionOutput
	if rf, ok := ret.Get(0).(func(*appconfig.DeleteExtensionInput) *appconfig.DeleteExtensionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.DeleteExtensionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.DeleteExtensionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteExtensionAssociation provides a mock function with given fields: _a0
func (_m *API) DeleteExtensionAssociation(_a0 *appconfig.DeleteExtensionAssociationInput) (*appconfig.DeleteExtensionAssociationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.DeleteExtensionAssociationOutput
	if rf, ok := ret.Get(0).(func(*appconfig.DeleteExtensionAssociationInput) *appconfig.DeleteExtensionAssociationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.DeleteExtensionAssociationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.DeleteExtensionAssociationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteExtensionAssociationRequest provides a mock function with given fields: _a0
func (_m *API) DeleteExtensionAssociationRequest(_a0 *appconfig.DeleteExtensionAssociationInput) (*request.Request, *appconfig.DeleteExtensionAssociationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.DeleteExtensionAssociationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.DeleteExtensionAssociationOutput
	if rf, ok := ret.Get(1).(func(*appconfig.DeleteExtensionAssociationInput) *appconfig.DeleteExtensionAssociationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.DeleteExtensionAssociationOutput)
		}
	}

	return r0, r1
}

// DeleteExtensionAssociationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) DeleteExtensionAssociationWithContext(_a0 context.Context, _a1 *appconfig.DeleteExtensionAssociationInput, _a2 ...request.Option) (*appconfig.DeleteExtensionAssociationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.DeleteExtensionAssociationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.DeleteExtensionAssociationInput, ...request.Option) *appconfig.DeleteExtensionAssociationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.DeleteExtensionAssociationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.DeleteExtensionAssociationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteExtensionRequest provides a mock function with given fields: _a0
func (_m *API) DeleteExtensionRequest(_a0 *appconfig.DeleteExtensionInput) (*request.Request, *appconfig.DeleteExtensionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.DeleteExtensionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.DeleteExtensionOutput
	if rf, ok := ret.Get(1).(func(*appconfig.DeleteExtensionInput) *appconfig.DeleteExtensionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.DeleteExtensionOutput)
		}
	}

	return r0, r1
}

// DeleteExtensionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) DeleteExtensionWithContext(_a0 context.Context, _a1 *appconfig.DeleteExtensionInput, _a2 ...request.Option) (*appconfig.DeleteExtensionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.DeleteExtensionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.DeleteExtensionInput, ...request.Option) *appconfig.DeleteExtensionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.DeleteExtensionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.DeleteExtensionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteHostedConfigurationVersion provides a mock function with given fields: _a0
func (_m *API) DeleteHostedConfigurationVersion(_a0 *appconfig.DeleteHostedConfigurationVersionInput) (*appconfig.DeleteHostedConfigurationVersionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.DeleteHostedConfigurationVersionOutput
	if rf, ok := ret.Get(0).(func(*appconfig.DeleteHostedConfigurationVersionInput) *appconfig.DeleteHostedConfigurationVersionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.DeleteHostedConfigurationVersionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.DeleteHostedConfigurationVersionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteHostedConfigurationVersionRequest provides a mock function with given fields: _a0
func (_m *API) DeleteHostedConfigurationVersionRequest(_a0 *appconfig.DeleteHostedConfigurationVersionInput) (*request.Request, *appconfig.DeleteHostedConfigurationVersionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.DeleteHostedConfigurationVersionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.DeleteHostedConfigurationVersionOutput
	if rf, ok := ret.Get(1).(func(*appconfig.DeleteHostedConfigurationVersionInput) *appconfig.DeleteHostedConfigurationVersionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.DeleteHostedConfigurationVersionOutput)
		}
	}

	return r0, r1
}

// DeleteHostedConfigurationVersionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) DeleteHostedConfigurationVersionWithContext(_a0 context.Context, _a1 *appconfig.DeleteHostedConfigurationVersionInput, _a2 ...request.Option) (*appconfig.DeleteHostedConfigurationVersionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.DeleteHostedConfigurationVersionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.DeleteHostedConfigurationVersionInput, ...request.Option) *appconfig.DeleteHostedConfigurationVersionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.DeleteHostedConfigurationVersionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.DeleteHostedConfigurationVersionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplication provides a mock function with given fields: _a0
func (_m *API) GetApplication(_a0 *appconfig.GetApplicationInput) (*appconfig.GetApplicationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.GetApplicationOutput
	if rf, ok := ret.Get(0).(func(*appconfig.GetApplicationInput) *appconfig.GetApplicationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.GetApplicationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.GetApplicationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplicationRequest provides a mock function with given fields: _a0
func (_m *API) GetApplicationRequest(_a0 *appconfig.GetApplicationInput) (*request.Request, *appconfig.GetApplicationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.GetApplicationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.GetApplicationOutput
	if rf, ok := ret.Get(1).(func(*appconfig.GetApplicationInput) *appconfig.GetApplicationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.GetApplicationOutput)
		}
	}

	return r0, r1
}

// GetApplicationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) GetApplicationWithContext(_a0 context.Context, _a1 *appconfig.GetApplicationInput, _a2 ...request.Option) (*appconfig.GetApplicationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.GetApplicationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.GetApplicationInput, ...request.Option) *appconfig.GetApplicationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.GetApplicationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.GetApplicationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfiguration provides a mock function with given fields: _a0
func (_m *API) GetConfiguration(_a0 *appconfig.GetConfigurationInput) (*appconfig.GetConfigurationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.GetConfigurationOutput
	if rf, ok := ret.Get(0).(func(*appconfig.GetConfigurationInput) *appconfig.GetConfigurationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.GetConfigurationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.GetConfigurationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationProfile provides a mock function with given fields: _a0
func (_m *API) GetConfigurationProfile(_a0 *appconfig.GetConfigurationProfileInput) (*appconfig.GetConfigurationProfileOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.GetConfigurationProfileOutput
	if rf, ok := ret.Get(0).(func(*appconfig.GetConfigurationProfileInput) *appconfig.GetConfigurationProfileOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.GetConfigurationProfileOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.GetConfigurationProfileInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationProfileRequest provides a mock function with given fields: _a0
func (_m *API) GetConfigurationProfileRequest(_a0 *appconfig.GetConfigurationProfileInput) (*request.Request, *appconfig.GetConfigurationProfileOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.GetConfigurationProfileInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.GetConfigurationProfileOutput
	if rf, ok := ret.Get(1).(func(*appconfig.GetConfigurationProfileInput) *appconfig.GetConfigurationProfileOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.GetConfigurationProfileOutput)
		}
	}

	return r0, r1
}

// GetConfigurationProfileWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) GetConfigurationProfileWithContext(_a0 context.Context, _a1 *appconfig.GetConfigurationProfileInput, _a2 ...request.Option) (*appconfig.GetConfigurationProfileOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.GetConfigurationProfileOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.GetConfigurationProfileInput, ...request.Option) *appconfig.GetConfigurationProfileOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.GetConfigurationProfileOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.GetConfigurationProfileInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationRequest provides a mock function with given fields: _a0
func (_m *API) GetConfigurationRequest(_a0 *appconfig.GetConfigurationInput) (*request.Request, *appconfig.GetConfigurationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.GetConfigurationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.GetConfigurationOutput
	if rf, ok := ret.Get(1).(func(*appconfig.GetConfigurationInput) *appconfig.GetConfigurationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.GetConfigurationOutput)
		}
	}

	return r0, r1
}

// GetConfigurationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) GetConfigurationWithContext(_a0 context.Context, _a1 *appconfig.GetConfigurationInput, _a2 ...request.Option) (*appconfig.GetConfigurationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.GetConfigurationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.GetConfigurationInput, ...request.Option) *appconfig.GetConfigurationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.GetConfigurationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.GetConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeployment provides a mock function with given fields: _a0
func (_m *API) GetDeployment(_a0 *appconfig.GetDeploymentInput) (*appconfig.GetDeploymentOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.GetDeploymentOutput
	if rf, ok := ret.Get(0).(func(*appconfig.GetDeploymentInput) *appconfig.GetDeploymentOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.GetDeploymentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.GetDeploymentInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentRequest provides a mock function with given fields: _a0
func (_m *API) GetDeploymentRequest(_a0 *appconfig.GetDeploymentInput) (*request.Request, *appconfig.GetDeploymentOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.GetDeploymentInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.GetDeploymentOutput
	if rf, ok := ret.Get(1).(func(*appconfig.GetDeploymentInput) *appconfig.GetDeploymentOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.GetDeploymentOutput)
		}
	}

	return r0, r1
}

// GetDeploymentStrategy provides a mock function with given fields: _a0
func (_m *API) GetDeploymentStrategy(_a0 *appconfig.GetDeploymentStrategyInput) (*appconfig.GetDeploymentStrategyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.GetDeploymentStrategyOutput
	if rf, ok := ret.Get(0).(func(*appconfig.GetDeploymentStrategyInput) *appconfig.GetDeploymentStrategyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.GetDeploymentStrategyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.GetDeploymentStrategyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentStrategyRequest provides a mock function with given fields: _a0
func (_m *API) GetDeploymentStrategyRequest(_a0 *appconfig.GetDeploymentStrategyInput) (*request.Request, *appconfig.GetDeploymentStrategyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.GetDeploymentStrategyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.GetDeploymentStrategyOutput
	if rf, ok := ret.Get(1).(func(*appconfig.GetDeploymentStrategyInput) *appconfig.GetDeploymentStrategyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.GetDeploymentStrategyOutput)
		}
	}

	return r0, r1
}

// GetDeploymentStrategyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) GetDeploymentStrategyWithContext(_a0 context.Context, _a1 *appconfig.GetDeploymentStrategyInput, _a2 ...request.Option) (*appconfig.GetDeploymentStrategyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.GetDeploymentStrategyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.GetDeploymentStrategyInput, ...request.Option) *appconfig.GetDeploymentStrategyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.GetDeploymentStrategyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.GetDeploymentStrategyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) GetDeploymentWithContext(_a0 context.Context, _a1 *appconfig.GetDeploymentInput, _a2 ...request.Option) (*appconfig.GetDeploymentOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.GetDeploymentOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.GetDeploymentInput, ...request.Option) *appconfig.GetDeploymentOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.GetDeploymentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.GetDeploymentInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnvironment provides a mock function with given fields: _a0
func (_m *API) GetEnvironment(_a0 *appconfig.GetEnvironmentInput) (*appconfig.GetEnvironmentOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.GetEnvironmentOutput
	if rf, ok := ret.Get(0).(func(*appconfig.GetEnvironmentInput) *appconfig.GetEnvironmentOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.GetEnvironmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.GetEnvironmentInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnvironmentRequest provides a mock function with given fields: _a0
func (_m *API) GetEnvironmentRequest(_a0 *appconfig.GetEnvironmentInput) (*request.Request, *appconfig.GetEnvironmentOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.GetEnvironmentInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.GetEnvironmentOutput
	if rf, ok := ret.Get(1).(func(*appconfig.GetEnvironmentInput) *appconfig.GetEnvironmentOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.GetEnvironmentOutput)
		}
	}

	return r0, r1
}

// GetEnvironmentWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) GetEnvironmentWithContext(_a0 context.Context, _a1 *appconfig.GetEnvironmentInput, _a2 ...request.Option) (*appconfig.GetEnvironmentOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.GetEnvironmentOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.GetEnvironmentInput, ...request.Option) *appconfig.GetEnvironmentOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.GetEnvironmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.GetEnvironmentInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExtension provides a mock function with given fields: _a0
func (_m *API) GetExtension(_a0 *appconfig.GetExtensionInput) (*appconfig.GetExtensionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.GetExtensionOutput
	if rf, ok := ret.Get(0).(func(*appconfig.GetExtensionInput) *appconfig.GetExtensionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.GetExtensionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.GetExtensionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExtensionAssociation provides a mock function with given fields: _a0
func (_m *API) GetExtensionAssociation(_a0 *appconfig.GetExtensionAssociationInput) (*appconfig.GetExtensionAssociationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.GetExtensionAssociationOutput
	if rf, ok := ret.Get(0).(func(*appconfig.GetExtensionAssociationInput) *appconfig.GetExtensionAssociationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.GetExtensionAssociationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.GetExtensionAssociationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExtensionAssociationRequest provides a mock function with given fields: _a0
func (_m *API) GetExtensionAssociationRequest(_a0 *appconfig.GetExtensionAssociationInput) (*request.Request, *appconfig.GetExtensionAssociationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.GetExtensionAssociationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.GetExtensionAssociationOutput
	if rf, ok := ret.Get(1).(func(*appconfig.GetExtensionAssociationInput) *appconfig.GetExtensionAssociationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.GetExtensionAssociationOutput)
		}
	}

	return r0, r1
}

// GetExtensionAssociationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) GetExtensionAssociationWithContext(_a0 context.Context, _a1 *appconfig.GetExtensionAssociationInput, _a2 ...request.Option) (*appconfig.GetExtensionAssociationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.GetExtensionAssociationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.GetExtensionAssociationInput, ...request.Option) *appconfig.GetExtensionAssociationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.GetExtensionAssociationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.GetExtensionAssociationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExtensionRequest provides a mock function with given fields: _a0
func (_m *API) GetExtensionRequest(_a0 *appconfig.GetExtensionInput) (*request.Request, *appconfig.GetExtensionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.GetExtensionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.GetExtensionOutput
	if rf, ok := ret.Get(1).(func(*appconfig.GetExtensionInput) *appconfig.GetExtensionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.GetExtensionOutput)
		}
	}

	return r0, r1
}

// GetExtensionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) GetExtensionWithContext(_a0 context.Context, _a1 *appconfig.GetExtensionInput, _a2 ...request.Option) (*appconfig.GetExtensionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.GetExtensionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.GetExtensionInput, ...request.Option) *appconfig.GetExtensionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.GetExtensionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.GetExtensionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostedConfigurationVersion provides a mock function with given fields: _a0
func (_m *API) GetHostedConfigurationVersion(_a0 *appconfig.GetHostedConfigurationVersionInput) (*appconfig.GetHostedConfigurationVersionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.GetHostedConfigurationVersionOutput
	if rf, ok := ret.Get(0).(func(*appconfig.GetHostedConfigurationVersionInput) *appconfig.GetHostedConfigurationVersionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.GetHostedConfigurationVersionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.GetHostedConfigurationVersionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostedConfigurationVersionRequest provides a mock function with given fields: _a0
func (_m *API) GetHostedConfigurationVersionRequest(_a0 *appconfig.GetHostedConfigurationVersionInput) (*request.Request, *appconfig.GetHostedConfigurationVersionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.GetHostedConfigurationVersionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.GetHostedConfigurationVersionOutput
	if rf, ok := ret.Get(1).(func(*appconfig.GetHostedConfigurationVersionInput) *appconfig.GetHostedConfigurationVersionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.GetHostedConfigurationVersionOutput)
		}
	}

	return r0, r1
}

// GetHostedConfigurationVersionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) GetHostedConfigurationVersionWithContext(_a0 context.Context, _a1 *appconfig.GetHostedConfigurationVersionInput, _a2 ...request.Option) (*appconfig.GetHostedConfigurationVersionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.GetHostedConfigurationVersionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.GetHostedConfigurationVersionInput, ...request.Option) *appconfig.GetHostedConfigurationVersionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.GetHostedConfigurationVersionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.GetHostedConfigurationVersionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplications provides a mock function with given fields: _a0
func (_m *API) ListApplications(_a0 *appconfig.ListApplicationsInput) (*appconfig.ListApplicationsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.ListApplicationsOutput
	if rf, ok := ret.Get(0).(func(*appconfig.ListApplicationsInput) *appconfig.ListApplicationsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ListApplicationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.ListApplicationsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplicationsPages provides a mock function with given fields: _a0, _a1
func (_m *API) ListApplicationsPages(_a0 *appconfig.ListApplicationsInput, _a1 func(*appconfig.ListApplicationsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*appconfig.ListApplicationsInput, func(*appconfig.ListApplicationsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListApplicationsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *API) ListApplicationsPagesWithContext(_a0 context.Context, _a1 *appconfig.ListApplicationsInput, _a2 func(*appconfig.ListApplicationsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListApplicationsInput, func(*appconfig.ListApplicationsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListApplicationsRequest provides a mock function with given fields: _a0
func (_m *API) ListApplicationsRequest(_a0 *appconfig.ListApplicationsInput) (*request.Request, *appconfig.ListApplicationsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.ListApplicationsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.ListApplicationsOutput
	if rf, ok := ret.Get(1).(func(*appconfig.ListApplicationsInput) *appconfig.ListApplicationsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.ListApplicationsOutput)
		}
	}

	return r0, r1
}

// ListApplicationsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) ListApplicationsWithContext(_a0 context.Context, _a1 *appconfig.ListApplicationsInput, _a2 ...request.Option) (*appconfig.ListApplicationsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.ListApplicationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListApplicationsInput, ...request.Option) *appconfig.ListApplicationsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ListApplicationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.ListApplicationsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConfigurationProfiles provides a mock function with given fields: _a0
func (_m *API) ListConfigurationProfiles(_a0 *appconfig.ListConfigurationProfilesInput) (*appconfig.ListConfigurationProfilesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.ListConfigurationProfilesOutput
	if rf, ok := ret.Get(0).(func(*appconfig.ListConfigurationProfilesInput) *appconfig.ListConfigurationProfilesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ListConfigurationProfilesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.ListConfigurationProfilesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConfigurationProfilesPages provides a mock function with given fields: _a0, _a1
func (_m *API) ListConfigurationProfilesPages(_a0 *appconfig.ListConfigurationProfilesInput, _a1 func(*appconfig.ListConfigurationProfilesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*appconfig.ListConfigurationProfilesInput, func(*appconfig.ListConfigurationProfilesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListConfigurationProfilesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *API) ListConfigurationProfilesPagesWithContext(_a0 context.Context, _a1 *appconfig.ListConfigurationProfilesInput, _a2 func(*appconfig.ListConfigurationProfilesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListConfigurationProfilesInput, func(*appconfig.ListConfigurationProfilesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListConfigurationProfilesRequest provides a mock function with given fields: _a0
func (_m *API) ListConfigurationProfilesRequest(_a0 *appconfig.ListConfigurationProfilesInput) (*request.Request, *appconfig.ListConfigurationProfilesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.ListConfigurationProfilesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.ListConfigurationProfilesOutput
	if rf, ok := ret.Get(1).(func(*appconfig.ListConfigurationProfilesInput) *appconfig.ListConfigurationProfilesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.ListConfigurationProfilesOutput)
		}
	}

	return r0, r1
}

// ListConfigurationProfilesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) ListConfigurationProfilesWithContext(_a0 context.Context, _a1 *appconfig.ListConfigurationProfilesInput, _a2 ...request.Option) (*appconfig.ListConfigurationProfilesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.ListConfigurationProfilesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListConfigurationProfilesInput, ...request.Option) *appconfig.ListConfigurationProfilesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ListConfigurationProfilesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.ListConfigurationProfilesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeploymentStrategies provides a mock function with given fields: _a0
func (_m *API) ListDeploymentStrategies(_a0 *appconfig.ListDeploymentStrategiesInput) (*appconfig.ListDeploymentStrategiesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.ListDeploymentStrategiesOutput
	if rf, ok := ret.Get(0).(func(*appconfig.ListDeploymentStrategiesInput) *appconfig.ListDeploymentStrategiesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ListDeploymentStrategiesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.ListDeploymentStrategiesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeploymentStrategiesPages provides a mock function with given fields: _a0, _a1
func (_m *API) ListDeploymentStrategiesPages(_a0 *appconfig.ListDeploymentStrategiesInput, _a1 func(*appconfig.ListDeploymentStrategiesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*appconfig.ListDeploymentStrategiesInput, func(*appconfig.ListDeploymentStrategiesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListDeploymentStrategiesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *API) ListDeploymentStrategiesPagesWithContext(_a0 context.Context, _a1 *appconfig.ListDeploymentStrategiesInput, _a2 func(*appconfig.ListDeploymentStrategiesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListDeploymentStrategiesInput, func(*appconfig.ListDeploymentStrategiesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListDeploymentStrategiesRequest provides a mock function with given fields: _a0
func (_m *API) ListDeploymentStrategiesRequest(_a0 *appconfig.ListDeploymentStrategiesInput) (*request.Request, *appconfig.ListDeploymentStrategiesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.ListDeploymentStrategiesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.ListDeploymentStrategiesOutput
	if rf, ok := ret.Get(1).(func(*appconfig.ListDeploymentStrategiesInput) *appconfig.ListDeploymentStrategiesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.ListDeploymentStrategiesOutput)
		}
	}

	return r0, r1
}

// ListDeploymentStrategiesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) ListDeploymentStrategiesWithContext(_a0 context.Context, _a1 *appconfig.ListDeploymentStrategiesInput, _a2 ...request.Option) (*appconfig.ListDeploymentStrategiesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.ListDeploymentStrategiesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListDeploymentStrategiesInput, ...request.Option) *appconfig.ListDeploymentStrategiesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ListDeploymentStrategiesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.ListDeploymentStrategiesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeployments provides a mock function with given fields: _a0
func (_m *API) ListDeployments(_a0 *appconfig.ListDeploymentsInput) (*appconfig.ListDeploymentsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.ListDeploymentsOutput
	if rf, ok := ret.Get(0).(func(*appconfig.ListDeploymentsInput) *appconfig.ListDeploymentsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ListDeploymentsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.ListDeploymentsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeploymentsPages provides a mock function with given fields: _a0, _a1
func (_m *API) ListDeploymentsPages(_a0 *appconfig.ListDeploymentsInput, _a1 func(*appconfig.ListDeploymentsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*appconfig.ListDeploymentsInput, func(*appconfig.ListDeploymentsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListDeploymentsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *API) ListDeploymentsPagesWithContext(_a0 context.Context, _a1 *appconfig.ListDeploymentsInput, _a2 func(*appconfig.ListDeploymentsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListDeploymentsInput, func(*appconfig.ListDeploymentsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListDeploymentsRequest provides a mock function with given fields: _a0
func (_m *API) ListDeploymentsRequest(_a0 *appconfig.ListDeploymentsInput) (*request.Request, *appconfig.ListDeploymentsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.ListDeploymentsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.ListDeploymentsOutput
	if rf, ok := ret.Get(1).(func(*appconfig.ListDeploymentsInput) *appconfig.ListDeploymentsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.ListDeploymentsOutput)
		}
	}

	return r0, r1
}

// ListDeploymentsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) ListDeploymentsWithContext(_a0 context.Context, _a1 *appconfig.ListDeploymentsInput, _a2 ...request.Option) (*appconfig.ListDeploymentsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.ListDeploymentsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListDeploymentsInput, ...request.Option) *appconfig.ListDeploymentsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ListDeploymentsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.ListDeploymentsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEnvironments provides a mock function with given fields: _a0
func (_m *API) ListEnvironments(_a0 *appconfig.ListEnvironmentsInput) (*appconfig.ListEnvironmentsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.ListEnvironmentsOutput
	if rf, ok := ret.Get(0).(func(*appconfig.ListEnvironmentsInput) *appconfig.ListEnvironmentsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ListEnvironmentsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.ListEnvironmentsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEnvironmentsPages provides a mock function with given fields: _a0, _a1
func (_m *API) ListEnvironmentsPages(_a0 *appconfig.ListEnvironmentsInput, _a1 func(*appconfig.ListEnvironmentsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*appconfig.ListEnvironmentsInput, func(*appconfig.ListEnvironmentsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListEnvironmentsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *API) ListEnvironmentsPagesWithContext(_a0 context.Context, _a1 *appconfig.ListEnvironmentsInput, _a2 func(*appconfig.ListEnvironmentsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListEnvironmentsInput, func(*appconfig.ListEnvironmentsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListEnvironmentsRequest provides a mock function with given fields: _a0
func (_m *API) ListEnvironmentsRequest(_a0 *appconfig.ListEnvironmentsInput) (*request.Request, *appconfig.ListEnvironmentsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.ListEnvironmentsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.ListEnvironmentsOutput
	if rf, ok := ret.Get(1).(func(*appconfig.ListEnvironmentsInput) *appconfig.ListEnvironmentsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.ListEnvironmentsOutput)
		}
	}

	return r0, r1
}

// ListEnvironmentsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) ListEnvironmentsWithContext(_a0 context.Context, _a1 *appconfig.ListEnvironmentsInput, _a2 ...request.Option) (*appconfig.ListEnvironmentsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.ListEnvironmentsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListEnvironmentsInput, ...request.Option) *appconfig.ListEnvironmentsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ListEnvironmentsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.ListEnvironmentsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListExtensionAssociations provides a mock function with given fields: _a0
func (_m *API) ListExtensionAssociations(_a0 *appconfig.ListExtensionAssociationsInput) (*appconfig.ListExtensionAssociationsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.ListExtensionAssociationsOutput
	if rf, ok := ret.Get(0).(func(*appconfig.ListExtensionAssociationsInput) *appconfig.ListExtensionAssociationsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ListExtensionAssociationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.ListExtensionAssociationsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListExtensionAssociationsPages provides a mock function with given fields: _a0, _a1
func (_m *API) ListExtensionAssociationsPages(_a0 *appconfig.ListExtensionAssociationsInput, _a1 func(*appconfig.ListExtensionAssociationsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*appconfig.ListExtensionAssociationsInput, func(*appconfig.ListExtensionAssociationsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListExtensionAssociationsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *API) ListExtensionAssociationsPagesWithContext(_a0 context.Context, _a1 *appconfig.ListExtensionAssociationsInput, _a2 func(*appconfig.ListExtensionAssociationsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListExtensionAssociationsInput, func(*appconfig.ListExtensionAssociationsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListExtensionAssociationsRequest provides a mock function with given fields: _a0
func (_m *API) ListExtensionAssociationsRequest(_a0 *appconfig.ListExtensionAssociationsInput) (*request.Request, *appconfig.ListExtensionAssociationsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.ListExtensionAssociationsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.ListExtensionAssociationsOutput
	if rf, ok := ret.Get(1).(func(*appconfig.ListExtensionAssociationsInput) *appconfig.ListExtensionAssociationsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.ListExtensionAssociationsOutput)
		}
	}

	return r0, r1
}

// ListExtensionAssociationsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) ListExtensionAssociationsWithContext(_a0 context.Context, _a1 *appconfig.ListExtensionAssociationsInput, _a2 ...request.Option) (*appconfig.ListExtensionAssociationsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.ListExtensionAssociationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListExtensionAssociationsInput, ...request.Option) *appconfig.ListExtensionAssociationsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ListExtensionAssociationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.ListExtensionAssociationsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListExtensions provides a mock function with given fields: _a0
func (_m *API) ListExtensions(_a0 *appconfig.ListExtensionsInput) (*appconfig.ListExtensionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.ListExtensionsOutput
	if rf, ok := ret.Get(0).(func(*appconfig.ListExtensionsInput) *appconfig.ListExtensionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ListExtensionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.ListExtensionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListExtensionsPages provides a mock function with given fields: _a0, _a1
func (_m *API) ListExtensionsPages(_a0 *appconfig.ListExtensionsInput, _a1 func(*appconfig.ListExtensionsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*appconfig.ListExtensionsInput, func(*appconfig.ListExtensionsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListExtensionsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *API) ListExtensionsPagesWithContext(_a0 context.Context, _a1 *appconfig.ListExtensionsInput, _a2 func(*appconfig.ListExtensionsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListExtensionsInput, func(*appconfig.ListExtensionsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListExtensionsRequest provides a mock function with given fields: _a0
func (_m *API) ListExtensionsRequest(_a0 *appconfig.ListExtensionsInput) (*request.Request, *appconfig.ListExtensionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.ListExtensionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.ListExtensionsOutput
	if rf, ok := ret.Get(1).(func(*appconfig.ListExtensionsInput) *appconfig.ListExtensionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.ListExtensionsOutput)
		}
	}

	return r0, r1
}

// ListExtensionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) ListExtensionsWithContext(_a0 context.Context, _a1 *appconfig.ListExtensionsInput, _a2 ...request.Option) (*appconfig.ListExtensionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.ListExtensionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListExtensionsInput, ...request.Option) *appconfig.ListExtensionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ListExtensionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.ListExtensionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHostedConfigurationVersions provides a mock function with given fields: _a0
func (_m *API) ListHostedConfigurationVersions(_a0 *appconfig.ListHostedConfigurationVersionsInput) (*appconfig.ListHostedConfigurationVersionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.ListHostedConfigurationVersionsOutput
	if rf, ok := ret.Get(0).(func(*appconfig.ListHostedConfigurationVersionsInput) *appconfig.ListHostedConfigurationVersionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ListHostedConfigurationVersionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.ListHostedConfigurationVersionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHostedConfigurationVersionsPages provides a mock function with given fields: _a0, _a1
func (_m *API) ListHostedConfigurationVersionsPages(_a0 *appconfig.ListHostedConfigurationVersionsInput, _a1 func(*appconfig.ListHostedConfigurationVersionsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*appconfig.ListHostedConfigurationVersionsInput, func(*appconfig.ListHostedConfigurationVersionsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListHostedConfigurationVersionsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *API) ListHostedConfigurationVersionsPagesWithContext(_a0 context.Context, _a1 *appconfig.ListHostedConfigurationVersionsInput, _a2 func(*appconfig.ListHostedConfigurationVersionsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListHostedConfigurationVersionsInput, func(*appconfig.ListHostedConfigurationVersionsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListHostedConfigurationVersionsRequest provides a mock function with given fields: _a0
func (_m *API) ListHostedConfigurationVersionsRequest(_a0 *appconfig.ListHostedConfigurationVersionsInput) (*request.Request, *appconfig.ListHostedConfigurationVersionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.ListHostedConfigurationVersionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.ListHostedConfigurationVersionsOutput
	if rf, ok := ret.Get(1).(func(*appconfig.ListHostedConfigurationVersionsInput) *appconfig.ListHostedConfigurationVersionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.ListHostedConfigurationVersionsOutput)
		}
	}

	return r0, r1
}

// ListHostedConfigurationVersionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) ListHostedConfigurationVersionsWithContext(_a0 context.Context, _a1 *appconfig.ListHostedConfigurationVersionsInput, _a2 ...request.Option) (*appconfig.ListHostedConfigurationVersionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.ListHostedConfigurationVersionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListHostedConfigurationVersionsInput, ...request.Option) *appconfig.ListHostedConfigurationVersionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ListHostedConfigurationVersionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.ListHostedConfigurationVersionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: _a0
func (_m *API) ListTagsForResource(_a0 *appconfig.ListTagsForResourceInput) (*appconfig.ListTagsForResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(*appconfig.ListTagsForResourceInput) *appconfig.ListTagsForResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ListTagsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.ListTagsForResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResourceRequest provides a mock function with given fields: _a0
func (_m *API) ListTagsForResourceRequest(_a0 *appconfig.ListTagsForResourceInput) (*request.Request, *appconfig.ListTagsForResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.ListTagsForResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.ListTagsForResourceOutput
	if rf, ok := ret.Get(1).(func(*appconfig.ListTagsForResourceInput) *appconfig.ListTagsForResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.ListTagsForResourceOutput)
		}
	}

	return r0, r1
}

// ListTagsForResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) ListTagsForResourceWithContext(_a0 context.Context, _a1 *appconfig.ListTagsForResourceInput, _a2 ...request.Option) (*appconfig.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListTagsForResourceInput, ...request.Option) *appconfig.ListTagsForResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ListTagsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.ListTagsForResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDeployment provides a mock function with given fields: _a0
func (_m *API) StartDeployment(_a0 *appconfig.StartDeploymentInput) (*appconfig.StartDeploymentOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.StartDeploymentOutput
	if rf, ok := ret.Get(0).(func(*appconfig.StartDeploymentInput) *appconfig.StartDeploymentOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.StartDeploymentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.StartDeploymentInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDeploymentRequest provides a mock function with given fields: _a0
func (_m *API) StartDeploymentRequest(_a0 *appconfig.StartDeploymentInput) (*request.Request, *appconfig.StartDeploymentOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.StartDeploymentInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.StartDeploymentOutput
	if rf, ok := ret.Get(1).(func(*appconfig.StartDeploymentInput) *appconfig.StartDeploymentOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.StartDeploymentOutput)
		}
	}

	return r0, r1
}

// StartDeploymentWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) StartDeploymentWithContext(_a0 context.Context, _a1 *appconfig.StartDeploymentInput, _a2 ...request.Option) (*appconfig.StartDeploymentOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.StartDeploymentOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.StartDeploymentInput, ...request.Option) *appconfig.StartDeploymentOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.StartDeploymentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.StartDeploymentInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopDeployment provides a mock function with given fields: _a0
func (_m *API) StopDeployment(_a0 *appconfig.StopDeploymentInput) (*appconfig.StopDeploymentOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.StopDeploymentOutput
	if rf, ok := ret.Get(0).(func(*appconfig.StopDeploymentInput) *appconfig.StopDeploymentOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.StopDeploymentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.StopDeploymentInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopDeploymentRequest provides a mock function with given fields: _a0
func (_m *API) StopDeploymentRequest(_a0 *appconfig.StopDeploymentInput) (*request.Request, *appconfig.StopDeploymentOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.StopDeploymentInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.StopDeploymentOutput
	if rf, ok := ret.Get(1).(func(*appconfig.StopDeploymentInput) *appconfig.StopDeploymentOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.StopDeploymentOutput)
		}
	}

	return r0, r1
}

// StopDeploymentWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) StopDeploymentWithContext(_a0 context.Context, _a1 *appconfig.StopDeploymentInput, _a2 ...request.Option) (*appconfig.StopDeploymentOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.StopDeploymentOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.StopDeploymentInput, ...request.Option) *appconfig.StopDeploymentOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.StopDeploymentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.StopDeploymentInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: _a0
func (_m *API) TagResource(_a0 *appconfig.TagResourceInput) (*appconfig.TagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.TagResourceOutput
	if rf, ok := ret.Get(0).(func(*appconfig.TagResourceInput) *appconfig.TagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.TagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResourceRequest provides a mock function with given fields: _a0
func (_m *API) TagResourceRequest(_a0 *appconfig.TagResourceInput) (*request.Request, *appconfig.TagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.TagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.TagResourceOutput
	if rf, ok := ret.Get(1).(func(*appconfig.TagResourceInput) *appconfig.TagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.TagResourceOutput)
		}
	}

	return r0, r1
}

// TagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) TagResourceWithContext(_a0 context.Context, _a1 *appconfig.TagResourceInput, _a2 ...request.Option) (*appconfig.TagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.TagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.TagResourceInput, ...request.Option) *appconfig.TagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.TagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: _a0
func (_m *API) UntagResource(_a0 *appconfig.UntagResourceInput) (*appconfig.UntagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(*appconfig.UntagResourceInput) *appconfig.UntagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.UntagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResourceRequest provides a mock function with given fields: _a0
func (_m *API) UntagResourceRequest(_a0 *appconfig.UntagResourceInput) (*request.Request, *appconfig.UntagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.UntagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.UntagResourceOutput
	if rf, ok := ret.Get(1).(func(*appconfig.UntagResourceInput) *appconfig.UntagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.UntagResourceOutput)
		}
	}

	return r0, r1
}

// UntagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) UntagResourceWithContext(_a0 context.Context, _a1 *appconfig.UntagResourceInput, _a2 ...request.Option) (*appconfig.UntagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.UntagResourceInput, ...request.Option) *appconfig.UntagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.UntagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApplication provides a mock function with given fields: _a0
func (_m *API) UpdateApplication(_a0 *appconfig.UpdateApplicationInput) (*appconfig.UpdateApplicationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.UpdateApplicationOutput
	if rf, ok := ret.Get(0).(func(*appconfig.UpdateApplicationInput) *appconfig.UpdateApplicationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.UpdateApplicationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.UpdateApplicationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApplicationRequest provides a mock function with given fields: _a0
func (_m *API) UpdateApplicationRequest(_a0 *appconfig.UpdateApplicationInput) (*request.Request, *appconfig.UpdateApplicationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.UpdateApplicationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.UpdateApplicationOutput
	if rf, ok := ret.Get(1).(func(*appconfig.UpdateApplicationInput) *appconfig.UpdateApplicationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.UpdateApplicationOutput)
		}
	}

	return r0, r1
}

// UpdateApplicationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) UpdateApplicationWithContext(_a0 context.Context, _a1 *appconfig.UpdateApplicationInput, _a2 ...request.Option) (*appconfig.UpdateApplicationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.UpdateApplicationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.UpdateApplicationInput, ...request.Option) *appconfig.UpdateApplicationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.UpdateApplicationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.UpdateApplicationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConfigurationProfile provides a mock function with given fields: _a0
func (_m *API) UpdateConfigurationProfile(_a0 *appconfig.UpdateConfigurationProfileInput) (*appconfig.UpdateConfigurationProfileOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.UpdateConfigurationProfileOutput
	if rf, ok := ret.Get(0).(func(*appconfig.UpdateConfigurationProfileInput) *appconfig.UpdateConfigurationProfileOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.UpdateConfigurationProfileOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.UpdateConfigurationProfileInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConfigurationProfileRequest provides a mock function with given fields: _a0
func (_m *API) UpdateConfigurationProfileRequest(_a0 *appconfig.UpdateConfigurationProfileInput) (*request.Request, *appconfig.UpdateConfigurationProfileOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.UpdateConfigurationProfileInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.UpdateConfigurationProfileOutput
	if rf, ok := ret.Get(1).(func(*appconfig.UpdateConfigurationProfileInput) *appconfig.UpdateConfigurationProfileOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.UpdateConfigurationProfileOutput)
		}
	}

	return r0, r1
}

// UpdateConfigurationProfileWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) UpdateConfigurationProfileWithContext(_a0 context.Context, _a1 *appconfig.UpdateConfigurationProfileInput, _a2 ...request.Option) (*appconfig.UpdateConfigurationProfileOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.UpdateConfigurationProfileOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.UpdateConfigurationProfileInput, ...request.Option) *appconfig.UpdateConfigurationProfileOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.UpdateConfigurationProfileOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.UpdateConfigurationProfileInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeploymentStrategy provides a mock function with given fields: _a0
func (_m *API) UpdateDeploymentStrategy(_a0 *appconfig.UpdateDeploymentStrategyInput) (*appconfig.UpdateDeploymentStrategyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.UpdateDeploymentStrategyOutput
	if rf, ok := ret.Get(0).(func(*appconfig.UpdateDeploymentStrategyInput) *appconfig.UpdateDeploymentStrategyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.UpdateDeploymentStrategyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.UpdateDeploymentStrategyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeploymentStrategyRequest provides a mock function with given fields: _a0
func (_m *API) UpdateDeploymentStrategyRequest(_a0 *appconfig.UpdateDeploymentStrategyInput) (*request.Request, *appconfig.UpdateDeploymentStrategyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.UpdateDeploymentStrategyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.UpdateDeploymentStrategyOutput
	if rf, ok := ret.Get(1).(func(*appconfig.UpdateDeploymentStrategyInput) *appconfig.UpdateDeploymentStrategyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.UpdateDeploymentStrategyOutput)
		}
	}

	return r0, r1
}

// UpdateDeploymentStrategyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) UpdateDeploymentStrategyWithContext(_a0 context.Context, _a1 *appconfig.UpdateDeploymentStrategyInput, _a2 ...request.Option) (*appconfig.UpdateDeploymentStrategyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.UpdateDeploymentStrategyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.UpdateDeploymentStrategyInput, ...request.Option) *appconfig.UpdateDeploymentStrategyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.UpdateDeploymentStrategyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.UpdateDeploymentStrategyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEnvironment provides a mock function with given fields: _a0
func (_m *API) UpdateEnvironment(_a0 *appconfig.UpdateEnvironmentInput) (*appconfig.UpdateEnvironmentOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.UpdateEnvironmentOutput
	if rf, ok := ret.Get(0).(func(*appconfig.UpdateEnvironmentInput) *appconfig.UpdateEnvironmentOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.UpdateEnvironmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.UpdateEnvironmentInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEnvironmentRequest provides a mock function with given fields: _a0
func (_m *API) UpdateEnvironmentRequest(_a0 *appconfig.UpdateEnvironmentInput) (*request.Request, *appconfig.UpdateEnvironmentOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.UpdateEnvironmentInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.UpdateEnvironmentOutput
	if rf, ok := ret.Get(1).(func(*appconfig.UpdateEnvironmentInput) *appconfig.UpdateEnvironmentOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.UpdateEnvironmentOutput)
		}
	}

	return r0, r1
}

// UpdateEnvironmentWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) UpdateEnvironmentWithContext(_a0 context.Context, _a1 *appconfig.UpdateEnvironmentInput, _a2 ...request.Option) (*appconfig.UpdateEnvironmentOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.UpdateEnvironmentOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.UpdateEnvironmentInput, ...request.Option) *appconfig.UpdateEnvironmentOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.UpdateEnvironmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.UpdateEnvironmentInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExtension provides a mock function with given fields: _a0
func (_m *API) UpdateExtension(_a0 *appconfig.UpdateExtensionInput) (*appconfig.UpdateExtensionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.UpdateExtensionOutput
	if rf, ok := ret.Get(0).(func(*appconfig.UpdateExtensionInput) *appconfig.UpdateExtensionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.UpdateExtensionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.UpdateExtensionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExtensionAssociation provides a mock function with given fields: _a0
func (_m *API) UpdateExtensionAssociation(_a0 *appconfig.UpdateExtensionAssociationInput) (*appconfig.UpdateExtensionAssociationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.UpdateExtensionAssociationOutput
	if rf, ok := ret.Get(0).(func(*appconfig.UpdateExtensionAssociationInput) *appconfig.UpdateExtensionAssociationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.UpdateExtensionAssociationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.UpdateExtensionAssociationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExtensionAssociationRequest provides a mock function with given fields: _a0
func (_m *API) UpdateExtensionAssociationRequest(_a0 *appconfig.UpdateExtensionAssociationInput) (*request.Request, *appconfig.UpdateExtensionAssociationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.UpdateExtensionAssociationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.UpdateExtensionAssociationOutput
	if rf, ok := ret.Get(1).(func(*appconfig.UpdateExtensionAssociationInput) *appconfig.UpdateExtensionAssociationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.UpdateExtensionAssociationOutput)
		}
	}

	return r0, r1
}

// UpdateExtensionAssociationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) UpdateExtensionAssociationWithContext(_a0 context.Context, _a1 *appconfig.UpdateExtensionAssociationInput, _a2 ...request.Option) (*appconfig.UpdateExtensionAssociationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.UpdateExtensionAssociationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.UpdateExtensionAssociationInput, ...request.Option) *appconfig.UpdateExtensionAssociationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.UpdateExtensionAssociationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.UpdateExtensionAssociationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExtensionRequest provides a mock function with given fields: _a0
func (_m *API) UpdateExtensionRequest(_a0 *appconfig.UpdateExtensionInput) (*request.Request, *appconfig.UpdateExtensionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.UpdateExtensionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.UpdateExtensionOutput
	if rf, ok := ret.Get(1).(func(*appconfig.UpdateExtensionInput) *appconfig.UpdateExtensionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.UpdateExtensionOutput)
		}
	}

	return r0, r1
}

// UpdateExtensionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) UpdateExtensionWithContext(_a0 context.Context, _a1 *appconfig.UpdateExtensionInput, _a2 ...request.Option) (*appconfig.UpdateExtensionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.UpdateExtensionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.UpdateExtensionInput, ...request.Option) *appconfig.UpdateExtensionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.UpdateExtensionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.UpdateExtensionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateConfiguration provides a mock function with given fields: _a0
func (_m *API) ValidateConfiguration(_a0 *appconfig.ValidateConfigurationInput) (*appconfig.ValidateConfigurationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *appconfig.ValidateConfigurationOutput
	if rf, ok := ret.Get(0).(func(*appconfig.ValidateConfigurationInput) *appconfig.ValidateConfigurationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ValidateConfigurationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*appconfig.ValidateConfigurationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateConfigurationRequest provides a mock function with given fields: _a0
func (_m *API) ValidateConfigurationRequest(_a0 *appconfig.ValidateConfigurationInput) (*request.Request, *appconfig.ValidateConfigurationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*appconfig.ValidateConfigurationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *appconfig.ValidateConfigurationOutput
	if rf, ok := ret.Get(1).(func(*appconfig.ValidateConfigurationInput) *appconfig.ValidateConfigurationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appconfig.ValidateConfigurationOutput)
		}
	}

	return r0, r1
}

// ValidateConfigurationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) ValidateConfigurationWithContext(_a0 context.Context, _a1 *appconfig.ValidateConfigurationInput, _a2 ...request.Option) (*appconfig.ValidateConfigurationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *appconfig.ValidateConfigurationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ValidateConfigurationInput, ...request.Option) *appconfig.ValidateConfigurationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ValidateConfigurationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.ValidateConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewAPI creates a new instance of API. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAPI(t mockConstructorTestingTNewAPI) *API {
	mock := &API{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
