// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	kafkaconnect "github.com/aws/aws-sdk-go/service/kafkaconnect"
	mock "github.com/stretchr/testify/mock"

	request "github.com/aws/aws-sdk-go/aws/request"
)

// KafkaConnect is an autogenerated mock type for the KafkaConnect type
type KafkaConnect struct {
	mock.Mock
}

// CreateConnector provides a mock function with given fields: _a0
func (_m *KafkaConnect) CreateConnector(_a0 *kafkaconnect.CreateConnectorInput) (*kafkaconnect.CreateConnectorOutput, error) {
	ret := _m.Called(_a0)

	var r0 *kafkaconnect.CreateConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*kafkaconnect.CreateConnectorInput) (*kafkaconnect.CreateConnectorOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*kafkaconnect.CreateConnectorInput) *kafkaconnect.CreateConnectorOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafkaconnect.CreateConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*kafkaconnect.CreateConnectorInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConnectorRequest provides a mock function with given fields: _a0
func (_m *KafkaConnect) CreateConnectorRequest(_a0 *kafkaconnect.CreateConnectorInput) (*request.Request, *kafkaconnect.CreateConnectorOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *kafkaconnect.CreateConnectorOutput
	if rf, ok := ret.Get(0).(func(*kafkaconnect.CreateConnectorInput) (*request.Request, *kafkaconnect.CreateConnectorOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*kafkaconnect.CreateConnectorInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*kafkaconnect.CreateConnectorInput) *kafkaconnect.CreateConnectorOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*kafkaconnect.CreateConnectorOutput)
		}
	}

	return r0, r1
}

// CreateConnectorWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *KafkaConnect) CreateConnectorWithContext(_a0 context.Context, _a1 *kafkaconnect.CreateConnectorInput, _a2 ...request.Option) (*kafkaconnect.CreateConnectorOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *kafkaconnect.CreateConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kafkaconnect.CreateConnectorInput, ...request.Option) (*kafkaconnect.CreateConnectorOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kafkaconnect.CreateConnectorInput, ...request.Option) *kafkaconnect.CreateConnectorOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafkaconnect.CreateConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kafkaconnect.CreateConnectorInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCustomPlugin provides a mock function with given fields: _a0
func (_m *KafkaConnect) CreateCustomPlugin(_a0 *kafkaconnect.CreateCustomPluginInput) (*kafkaconnect.CreateCustomPluginOutput, error) {
	ret := _m.Called(_a0)

	var r0 *kafkaconnect.CreateCustomPluginOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*kafkaconnect.CreateCustomPluginInput) (*kafkaconnect.CreateCustomPluginOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*kafkaconnect.CreateCustomPluginInput) *kafkaconnect.CreateCustomPluginOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafkaconnect.CreateCustomPluginOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*kafkaconnect.CreateCustomPluginInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCustomPluginRequest provides a mock function with given fields: _a0
func (_m *KafkaConnect) CreateCustomPluginRequest(_a0 *kafkaconnect.CreateCustomPluginInput) (*request.Request, *kafkaconnect.CreateCustomPluginOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *kafkaconnect.CreateCustomPluginOutput
	if rf, ok := ret.Get(0).(func(*kafkaconnect.CreateCustomPluginInput) (*request.Request, *kafkaconnect.CreateCustomPluginOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*kafkaconnect.CreateCustomPluginInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*kafkaconnect.CreateCustomPluginInput) *kafkaconnect.CreateCustomPluginOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*kafkaconnect.CreateCustomPluginOutput)
		}
	}

	return r0, r1
}

// CreateCustomPluginWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *KafkaConnect) CreateCustomPluginWithContext(_a0 context.Context, _a1 *kafkaconnect.CreateCustomPluginInput, _a2 ...request.Option) (*kafkaconnect.CreateCustomPluginOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *kafkaconnect.CreateCustomPluginOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kafkaconnect.CreateCustomPluginInput, ...request.Option) (*kafkaconnect.CreateCustomPluginOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kafkaconnect.CreateCustomPluginInput, ...request.Option) *kafkaconnect.CreateCustomPluginOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafkaconnect.CreateCustomPluginOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kafkaconnect.CreateCustomPluginInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkerConfiguration provides a mock function with given fields: _a0
func (_m *KafkaConnect) CreateWorkerConfiguration(_a0 *kafkaconnect.CreateWorkerConfigurationInput) (*kafkaconnect.CreateWorkerConfigurationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *kafkaconnect.CreateWorkerConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*kafkaconnect.CreateWorkerConfigurationInput) (*kafkaconnect.CreateWorkerConfigurationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*kafkaconnect.CreateWorkerConfigurationInput) *kafkaconnect.CreateWorkerConfigurationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafkaconnect.CreateWorkerConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*kafkaconnect.CreateWorkerConfigurationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkerConfigurationRequest provides a mock function with given fields: _a0
func (_m *KafkaConnect) CreateWorkerConfigurationRequest(_a0 *kafkaconnect.CreateWorkerConfigurationInput) (*request.Request, *kafkaconnect.CreateWorkerConfigurationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *kafkaconnect.CreateWorkerConfigurationOutput
	if rf, ok := ret.Get(0).(func(*kafkaconnect.CreateWorkerConfigurationInput) (*request.Request, *kafkaconnect.CreateWorkerConfigurationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*kafkaconnect.CreateWorkerConfigurationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*kafkaconnect.CreateWorkerConfigurationInput) *kafkaconnect.CreateWorkerConfigurationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*kafkaconnect.CreateWorkerConfigurationOutput)
		}
	}

	return r0, r1
}

// CreateWorkerConfigurationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *KafkaConnect) CreateWorkerConfigurationWithContext(_a0 context.Context, _a1 *kafkaconnect.CreateWorkerConfigurationInput, _a2 ...request.Option) (*kafkaconnect.CreateWorkerConfigurationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *kafkaconnect.CreateWorkerConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kafkaconnect.CreateWorkerConfigurationInput, ...request.Option) (*kafkaconnect.CreateWorkerConfigurationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kafkaconnect.CreateWorkerConfigurationInput, ...request.Option) *kafkaconnect.CreateWorkerConfigurationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafkaconnect.CreateWorkerConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kafkaconnect.CreateWorkerConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConnector provides a mock function with given fields: _a0
func (_m *KafkaConnect) DeleteConnector(_a0 *kafkaconnect.DeleteConnectorInput) (*kafkaconnect.DeleteConnectorOutput, error) {
	ret := _m.Called(_a0)

	var r0 *kafkaconnect.DeleteConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*kafkaconnect.DeleteConnectorInput) (*kafkaconnect.DeleteConnectorOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*kafkaconnect.DeleteConnectorInput) *kafkaconnect.DeleteConnectorOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafkaconnect.DeleteConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*kafkaconnect.DeleteConnectorInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConnectorRequest provides a mock function with given fields: _a0
func (_m *KafkaConnect) DeleteConnectorRequest(_a0 *kafkaconnect.DeleteConnectorInput) (*request.Request, *kafkaconnect.DeleteConnectorOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *kafkaconnect.DeleteConnectorOutput
	if rf, ok := ret.Get(0).(func(*kafkaconnect.DeleteConnectorInput) (*request.Request, *kafkaconnect.DeleteConnectorOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*kafkaconnect.DeleteConnectorInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*kafkaconnect.DeleteConnectorInput) *kafkaconnect.DeleteConnectorOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*kafkaconnect.DeleteConnectorOutput)
		}
	}

	return r0, r1
}

// DeleteConnectorWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *KafkaConnect) DeleteConnectorWithContext(_a0 context.Context, _a1 *kafkaconnect.DeleteConnectorInput, _a2 ...request.Option) (*kafkaconnect.DeleteConnectorOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *kafkaconnect.DeleteConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kafkaconnect.DeleteConnectorInput, ...request.Option) (*kafkaconnect.DeleteConnectorOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kafkaconnect.DeleteConnectorInput, ...request.Option) *kafkaconnect.DeleteConnectorOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafkaconnect.DeleteConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kafkaconnect.DeleteConnectorInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCustomPlugin provides a mock function with given fields: _a0
func (_m *KafkaConnect) DeleteCustomPlugin(_a0 *kafkaconnect.DeleteCustomPluginInput) (*kafkaconnect.DeleteCustomPluginOutput, error) {
	ret := _m.Called(_a0)

	var r0 *kafkaconnect.DeleteCustomPluginOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*kafkaconnect.DeleteCustomPluginInput) (*kafkaconnect.DeleteCustomPluginOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*kafkaconnect.DeleteCustomPluginInput) *kafkaconnect.DeleteCustomPluginOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafkaconnect.DeleteCustomPluginOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*kafkaconnect.DeleteCustomPluginInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCustomPluginRequest provides a mock function with given fields: _a0
func (_m *KafkaConnect) DeleteCustomPluginRequest(_a0 *kafkaconnect.DeleteCustomPluginInput) (*request.Request, *kafkaconnect.DeleteCustomPluginOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *kafkaconnect.DeleteCustomPluginOutput
	if rf, ok := ret.Get(0).(func(*kafkaconnect.DeleteCustomPluginInput) (*request.Request, *kafkaconnect.DeleteCustomPluginOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*kafkaconnect.DeleteCustomPluginInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*kafkaconnect.DeleteCustomPluginInput) *kafkaconnect.DeleteCustomPluginOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*kafkaconnect.DeleteCustomPluginOutput)
		}
	}

	return r0, r1
}

// DeleteCustomPluginWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *KafkaConnect) DeleteCustomPluginWithContext(_a0 context.Context, _a1 *kafkaconnect.DeleteCustomPluginInput, _a2 ...request.Option) (*kafkaconnect.DeleteCustomPluginOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *kafkaconnect.DeleteCustomPluginOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kafkaconnect.DeleteCustomPluginInput, ...request.Option) (*kafkaconnect.DeleteCustomPluginOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kafkaconnect.DeleteCustomPluginInput, ...request.Option) *kafkaconnect.DeleteCustomPluginOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafkaconnect.DeleteCustomPluginOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kafkaconnect.DeleteCustomPluginInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConnector provides a mock function with given fields: _a0
func (_m *KafkaConnect) DescribeConnector(_a0 *kafkaconnect.DescribeConnectorInput) (*kafkaconnect.DescribeConnectorOutput, error) {
	ret := _m.Called(_a0)

	var r0 *kafkaconnect.DescribeConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*kafkaconnect.DescribeConnectorInput) (*kafkaconnect.DescribeConnectorOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*kafkaconnect.DescribeConnectorInput) *kafkaconnect.DescribeConnectorOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafkaconnect.DescribeConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*kafkaconnect.DescribeConnectorInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConnectorRequest provides a mock function with given fields: _a0
func (_m *KafkaConnect) DescribeConnectorRequest(_a0 *kafkaconnect.DescribeConnectorInput) (*request.Request, *kafkaconnect.DescribeConnectorOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *kafkaconnect.DescribeConnectorOutput
	if rf, ok := ret.Get(0).(func(*kafkaconnect.DescribeConnectorInput) (*request.Request, *kafkaconnect.DescribeConnectorOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*kafkaconnect.DescribeConnectorInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*kafkaconnect.DescribeConnectorInput) *kafkaconnect.DescribeConnectorOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*kafkaconnect.DescribeConnectorOutput)
		}
	}

	return r0, r1
}

// DescribeConnectorWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *KafkaConnect) DescribeConnectorWithContext(_a0 context.Context, _a1 *kafkaconnect.DescribeConnectorInput, _a2 ...request.Option) (*kafkaconnect.DescribeConnectorOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *kafkaconnect.DescribeConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kafkaconnect.DescribeConnectorInput, ...request.Option) (*kafkaconnect.DescribeConnectorOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kafkaconnect.DescribeConnectorInput, ...request.Option) *kafkaconnect.DescribeConnectorOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafkaconnect.DescribeConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kafkaconnect.DescribeConnectorInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCustomPlugin provides a mock function with given fields: _a0
func (_m *KafkaConnect) DescribeCustomPlugin(_a0 *kafkaconnect.DescribeCustomPluginInput) (*kafkaconnect.DescribeCustomPluginOutput, error) {
	ret := _m.Called(_a0)

	var r0 *kafkaconnect.DescribeCustomPluginOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*kafkaconnect.DescribeCustomPluginInput) (*kafkaconnect.DescribeCustomPluginOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*kafkaconnect.DescribeCustomPluginInput) *kafkaconnect.DescribeCustomPluginOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafkaconnect.DescribeCustomPluginOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*kafkaconnect.DescribeCustomPluginInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCustomPluginRequest provides a mock function with given fields: _a0
func (_m *KafkaConnect) DescribeCustomPluginRequest(_a0 *kafkaconnect.DescribeCustomPluginInput) (*request.Request, *kafkaconnect.DescribeCustomPluginOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *kafkaconnect.DescribeCustomPluginOutput
	if rf, ok := ret.Get(0).(func(*kafkaconnect.DescribeCustomPluginInput) (*request.Request, *kafkaconnect.DescribeCustomPluginOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*kafkaconnect.DescribeCustomPluginInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*kafkaconnect.DescribeCustomPluginInput) *kafkaconnect.DescribeCustomPluginOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*kafkaconnect.DescribeCustomPluginOutput)
		}
	}

	return r0, r1
}

// DescribeCustomPluginWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *KafkaConnect) DescribeCustomPluginWithContext(_a0 context.Context, _a1 *kafkaconnect.DescribeCustomPluginInput, _a2 ...request.Option) (*kafkaconnect.DescribeCustomPluginOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *kafkaconnect.DescribeCustomPluginOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kafkaconnect.DescribeCustomPluginInput, ...request.Option) (*kafkaconnect.DescribeCustomPluginOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kafkaconnect.DescribeCustomPluginInput, ...request.Option) *kafkaconnect.DescribeCustomPluginOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafkaconnect.DescribeCustomPluginOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kafkaconnect.DescribeCustomPluginInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeWorkerConfiguration provides a mock function with given fields: _a0
func (_m *KafkaConnect) DescribeWorkerConfiguration(_a0 *kafkaconnect.DescribeWorkerConfigurationInput) (*kafkaconnect.DescribeWorkerConfigurationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *kafkaconnect.DescribeWorkerConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*kafkaconnect.DescribeWorkerConfigurationInput) (*kafkaconnect.DescribeWorkerConfigurationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*kafkaconnect.DescribeWorkerConfigurationInput) *kafkaconnect.DescribeWorkerConfigurationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafkaconnect.DescribeWorkerConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*kafkaconnect.DescribeWorkerConfigurationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeWorkerConfigurationRequest provides a mock function with given fields: _a0
func (_m *KafkaConnect) DescribeWorkerConfigurationRequest(_a0 *kafkaconnect.DescribeWorkerConfigurationInput) (*request.Request, *kafkaconnect.DescribeWorkerConfigurationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *kafkaconnect.DescribeWorkerConfigurationOutput
	if rf, ok := ret.Get(0).(func(*kafkaconnect.DescribeWorkerConfigurationInput) (*request.Request, *kafkaconnect.DescribeWorkerConfigurationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*kafkaconnect.DescribeWorkerConfigurationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*kafkaconnect.DescribeWorkerConfigurationInput) *kafkaconnect.DescribeWorkerConfigurationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*kafkaconnect.DescribeWorkerConfigurationOutput)
		}
	}

	return r0, r1
}

// DescribeWorkerConfigurationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *KafkaConnect) DescribeWorkerConfigurationWithContext(_a0 context.Context, _a1 *kafkaconnect.DescribeWorkerConfigurationInput, _a2 ...request.Option) (*kafkaconnect.DescribeWorkerConfigurationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *kafkaconnect.DescribeWorkerConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kafkaconnect.DescribeWorkerConfigurationInput, ...request.Option) (*kafkaconnect.DescribeWorkerConfigurationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kafkaconnect.DescribeWorkerConfigurationInput, ...request.Option) *kafkaconnect.DescribeWorkerConfigurationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafkaconnect.DescribeWorkerConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kafkaconnect.DescribeWorkerConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConnectors provides a mock function with given fields: _a0
func (_m *KafkaConnect) ListConnectors(_a0 *kafkaconnect.ListConnectorsInput) (*kafkaconnect.ListConnectorsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *kafkaconnect.ListConnectorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*kafkaconnect.ListConnectorsInput) (*kafkaconnect.ListConnectorsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*kafkaconnect.ListConnectorsInput) *kafkaconnect.ListConnectorsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafkaconnect.ListConnectorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*kafkaconnect.ListConnectorsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConnectorsPages provides a mock function with given fields: _a0, _a1
func (_m *KafkaConnect) ListConnectorsPages(_a0 *kafkaconnect.ListConnectorsInput, _a1 func(*kafkaconnect.ListConnectorsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*kafkaconnect.ListConnectorsInput, func(*kafkaconnect.ListConnectorsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListConnectorsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *KafkaConnect) ListConnectorsPagesWithContext(_a0 context.Context, _a1 *kafkaconnect.ListConnectorsInput, _a2 func(*kafkaconnect.ListConnectorsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *kafkaconnect.ListConnectorsInput, func(*kafkaconnect.ListConnectorsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListConnectorsRequest provides a mock function with given fields: _a0
func (_m *KafkaConnect) ListConnectorsRequest(_a0 *kafkaconnect.ListConnectorsInput) (*request.Request, *kafkaconnect.ListConnectorsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *kafkaconnect.ListConnectorsOutput
	if rf, ok := ret.Get(0).(func(*kafkaconnect.ListConnectorsInput) (*request.Request, *kafkaconnect.ListConnectorsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*kafkaconnect.ListConnectorsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*kafkaconnect.ListConnectorsInput) *kafkaconnect.ListConnectorsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*kafkaconnect.ListConnectorsOutput)
		}
	}

	return r0, r1
}

// ListConnectorsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *KafkaConnect) ListConnectorsWithContext(_a0 context.Context, _a1 *kafkaconnect.ListConnectorsInput, _a2 ...request.Option) (*kafkaconnect.ListConnectorsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *kafkaconnect.ListConnectorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kafkaconnect.ListConnectorsInput, ...request.Option) (*kafkaconnect.ListConnectorsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kafkaconnect.ListConnectorsInput, ...request.Option) *kafkaconnect.ListConnectorsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafkaconnect.ListConnectorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kafkaconnect.ListConnectorsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCustomPlugins provides a mock function with given fields: _a0
func (_m *KafkaConnect) ListCustomPlugins(_a0 *kafkaconnect.ListCustomPluginsInput) (*kafkaconnect.ListCustomPluginsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *kafkaconnect.ListCustomPluginsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*kafkaconnect.ListCustomPluginsInput) (*kafkaconnect.ListCustomPluginsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*kafkaconnect.ListCustomPluginsInput) *kafkaconnect.ListCustomPluginsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafkaconnect.ListCustomPluginsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*kafkaconnect.ListCustomPluginsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCustomPluginsPages provides a mock function with given fields: _a0, _a1
func (_m *KafkaConnect) ListCustomPluginsPages(_a0 *kafkaconnect.ListCustomPluginsInput, _a1 func(*kafkaconnect.ListCustomPluginsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*kafkaconnect.ListCustomPluginsInput, func(*kafkaconnect.ListCustomPluginsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListCustomPluginsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *KafkaConnect) ListCustomPluginsPagesWithContext(_a0 context.Context, _a1 *kafkaconnect.ListCustomPluginsInput, _a2 func(*kafkaconnect.ListCustomPluginsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *kafkaconnect.ListCustomPluginsInput, func(*kafkaconnect.ListCustomPluginsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListCustomPluginsRequest provides a mock function with given fields: _a0
func (_m *KafkaConnect) ListCustomPluginsRequest(_a0 *kafkaconnect.ListCustomPluginsInput) (*request.Request, *kafkaconnect.ListCustomPluginsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *kafkaconnect.ListCustomPluginsOutput
	if rf, ok := ret.Get(0).(func(*kafkaconnect.ListCustomPluginsInput) (*request.Request, *kafkaconnect.ListCustomPluginsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*kafkaconnect.ListCustomPluginsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*kafkaconnect.ListCustomPluginsInput) *kafkaconnect.ListCustomPluginsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*kafkaconnect.ListCustomPluginsOutput)
		}
	}

	return r0, r1
}

// ListCustomPluginsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *KafkaConnect) ListCustomPluginsWithContext(_a0 context.Context, _a1 *kafkaconnect.ListCustomPluginsInput, _a2 ...request.Option) (*kafkaconnect.ListCustomPluginsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *kafkaconnect.ListCustomPluginsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kafkaconnect.ListCustomPluginsInput, ...request.Option) (*kafkaconnect.ListCustomPluginsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kafkaconnect.ListCustomPluginsInput, ...request.Option) *kafkaconnect.ListCustomPluginsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafkaconnect.ListCustomPluginsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kafkaconnect.ListCustomPluginsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkerConfigurations provides a mock function with given fields: _a0
func (_m *KafkaConnect) ListWorkerConfigurations(_a0 *kafkaconnect.ListWorkerConfigurationsInput) (*kafkaconnect.ListWorkerConfigurationsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *kafkaconnect.ListWorkerConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*kafkaconnect.ListWorkerConfigurationsInput) (*kafkaconnect.ListWorkerConfigurationsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*kafkaconnect.ListWorkerConfigurationsInput) *kafkaconnect.ListWorkerConfigurationsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafkaconnect.ListWorkerConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*kafkaconnect.ListWorkerConfigurationsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkerConfigurationsPages provides a mock function with given fields: _a0, _a1
func (_m *KafkaConnect) ListWorkerConfigurationsPages(_a0 *kafkaconnect.ListWorkerConfigurationsInput, _a1 func(*kafkaconnect.ListWorkerConfigurationsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*kafkaconnect.ListWorkerConfigurationsInput, func(*kafkaconnect.ListWorkerConfigurationsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListWorkerConfigurationsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *KafkaConnect) ListWorkerConfigurationsPagesWithContext(_a0 context.Context, _a1 *kafkaconnect.ListWorkerConfigurationsInput, _a2 func(*kafkaconnect.ListWorkerConfigurationsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *kafkaconnect.ListWorkerConfigurationsInput, func(*kafkaconnect.ListWorkerConfigurationsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListWorkerConfigurationsRequest provides a mock function with given fields: _a0
func (_m *KafkaConnect) ListWorkerConfigurationsRequest(_a0 *kafkaconnect.ListWorkerConfigurationsInput) (*request.Request, *kafkaconnect.ListWorkerConfigurationsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *kafkaconnect.ListWorkerConfigurationsOutput
	if rf, ok := ret.Get(0).(func(*kafkaconnect.ListWorkerConfigurationsInput) (*request.Request, *kafkaconnect.ListWorkerConfigurationsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*kafkaconnect.ListWorkerConfigurationsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*kafkaconnect.ListWorkerConfigurationsInput) *kafkaconnect.ListWorkerConfigurationsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*kafkaconnect.ListWorkerConfigurationsOutput)
		}
	}

	return r0, r1
}

// ListWorkerConfigurationsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *KafkaConnect) ListWorkerConfigurationsWithContext(_a0 context.Context, _a1 *kafkaconnect.ListWorkerConfigurationsInput, _a2 ...request.Option) (*kafkaconnect.ListWorkerConfigurationsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *kafkaconnect.ListWorkerConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kafkaconnect.ListWorkerConfigurationsInput, ...request.Option) (*kafkaconnect.ListWorkerConfigurationsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kafkaconnect.ListWorkerConfigurationsInput, ...request.Option) *kafkaconnect.ListWorkerConfigurationsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafkaconnect.ListWorkerConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kafkaconnect.ListWorkerConfigurationsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConnector provides a mock function with given fields: _a0
func (_m *KafkaConnect) UpdateConnector(_a0 *kafkaconnect.UpdateConnectorInput) (*kafkaconnect.UpdateConnectorOutput, error) {
	ret := _m.Called(_a0)

	var r0 *kafkaconnect.UpdateConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*kafkaconnect.UpdateConnectorInput) (*kafkaconnect.UpdateConnectorOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*kafkaconnect.UpdateConnectorInput) *kafkaconnect.UpdateConnectorOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafkaconnect.UpdateConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*kafkaconnect.UpdateConnectorInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConnectorRequest provides a mock function with given fields: _a0
func (_m *KafkaConnect) UpdateConnectorRequest(_a0 *kafkaconnect.UpdateConnectorInput) (*request.Request, *kafkaconnect.UpdateConnectorOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *kafkaconnect.UpdateConnectorOutput
	if rf, ok := ret.Get(0).(func(*kafkaconnect.UpdateConnectorInput) (*request.Request, *kafkaconnect.UpdateConnectorOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*kafkaconnect.UpdateConnectorInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*kafkaconnect.UpdateConnectorInput) *kafkaconnect.UpdateConnectorOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*kafkaconnect.UpdateConnectorOutput)
		}
	}

	return r0, r1
}

// UpdateConnectorWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *KafkaConnect) UpdateConnectorWithContext(_a0 context.Context, _a1 *kafkaconnect.UpdateConnectorInput, _a2 ...request.Option) (*kafkaconnect.UpdateConnectorOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *kafkaconnect.UpdateConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kafkaconnect.UpdateConnectorInput, ...request.Option) (*kafkaconnect.UpdateConnectorOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kafkaconnect.UpdateConnectorInput, ...request.Option) *kafkaconnect.UpdateConnectorOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafkaconnect.UpdateConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kafkaconnect.UpdateConnectorInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewKafkaConnect interface {
	mock.TestingT
	Cleanup(func())
}

// NewKafkaConnect creates a new instance of KafkaConnect. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKafkaConnect(t mockConstructorTestingTNewKafkaConnect) *KafkaConnect {
	mock := &KafkaConnect{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
